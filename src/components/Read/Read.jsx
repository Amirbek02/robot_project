import React from 'react';
// import ReactMarkdown from 'react-markdown';

import './read.scss';
function Read() {
  const [show, setShow] = React.useState(false);
  const [show1, setShow1] = React.useState(false);
  const [show2, setShow2] = React.useState(false);
  const [show3, setShow3] = React.useState(false);
  const [show4, setShow4] = React.useState(false);
  const [show5, setShow5] = React.useState(false);
  const [show6, setShow6] = React.useState(false);
  const [show7, setShow7] = React.useState(false);
  const [show8, setShow8] = React.useState(false);
  const [show9, setShow9] = React.useState(false);
  const [show10, setShow10] = React.useState(false);
  const [show11, setShow11] = React.useState(false);
  const [add, setAdd] = React.useState(1);

  const onShow = () => {
    setShow(!show);
    setShow1(false);
  };
  const onShow1 = () => {
    setShow(false);
    setShow1(!show1);
    setShow2(false);
    setShow3(false);
    setShow4(false);
    setShow5(false);
    setShow6(false);
    setShow7(false);
    setShow8(false);
    setShow9(false);
    setShow10(false);
    setShow11(false);
  };
  const onShow2 = () => {
    setShow(false);
    setShow1(false);
    setShow2(!show2);
    setShow3(false);
    setShow4(false);
    setShow5(false);
    setShow6(false);
    setShow7(false);
    setShow8(false);
    setShow9(false);
    setShow10(false);
    setShow11(false);
  };
  const onShow3 = () => {
    setShow(false);
    setShow1(false);
    setShow2(false);
    setShow3(!show3);
    setShow4(false);
    setShow5(false);
    setShow6(false);
    setShow7(false);
    setShow8(false);
    setShow9(false);
    setShow10(false);
    setShow11(false);
  };
  const onShow4 = () => {
    setShow(false);
    setShow1(false);
    setShow2(false);
    setShow3(false);
    setShow4(!show4);
    setShow5(false);
    setShow6(false);
    setShow7(false);
    setShow8(false);
    setShow9(false);
    setShow10(false);
    setShow11(false);
  };
  const onShow5 = () => {
    setShow(false);
    setShow1(false);
    setShow2(false);
    setShow3(false);
    setShow4(false);
    setShow5(!show5);
    setShow6(false);
    setShow7(false);
    setShow8(false);
    setShow9(false);
    setShow10(false);
    setShow11(false);
  };
  const onShow6 = () => {
    setShow(false);
    setShow1(false);
    setShow2(false);
    setShow3(false);
    setShow4(false);
    setShow5(false);
    setShow6(!show6);
    setShow7(false);
    setShow8(false);
    setShow9(false);
    setShow10(false);
    setShow11(false);
  };
  const onShow7 = () => {
    setShow(false);
    setShow1(false);
    setShow2(false);
    setShow3(false);
    setShow4(false);
    setShow5(false);
    setShow6(false);
    setShow7(!show7);
    setShow8(false);
    setShow9(false);
    setShow10(false);
    setShow11(false);
  };
  const onShow8 = () => {
    setShow(false);
    setShow1(false);
    setShow2(false);
    setShow3(false);
    setShow4(false);
    setShow5(false);
    setShow6(false);
    setShow7(false);
    setShow8(!show);
    setShow9(false);
    setShow10(false);
    setShow11(false);
  };
  const onShow9 = () => {
    setShow(false);
    setShow1(false);
    setShow2(false);
    setShow3(false);
    setShow4(false);
    setShow5(false);
    setShow6(false);
    setShow7(false);
    setShow8(false);
    setShow9(!show9);
    setShow10(false);
    setShow11(false);
  };
  const onShow10 = () => {
    setShow(false);
    setShow1(false);
    setShow2(false);
    setShow3(false);
    setShow4(false);
    setShow5(false);
    setShow6(false);
    setShow7(false);
    setShow8(false);
    setShow9(false);
    setShow10(!show10);
    setShow11(false);
  };
  const onShow11 = () => {
    setShow(false);
    setShow1(false);
    setShow2(false);
    setShow3(false);
    setShow4(false);
    setShow5(false);
    setShow6(false);
    setShow7(false);
    setShow8(false);
    setShow9(false);
    setShow10(false);
    setShow11(!show11);
  };
  return (
    <div className="container">
      <div className="read">
        <div className="readLeft">
          <h2 className="read__title">Мазмұны</h2>
          <ul className="read__menu">
            <li onClick={() => onShow()} className="read__item">
              <h3 className="read__menu-title">КІРІСПЕ</h3>
              {show && (
                <ul>
                  <li onClick={() => setAdd(1)}>
                    Робототехниканың және мехатрониканың даму тарихы.
                  </li>
                  <li onClick={() => setAdd(2)}>
                    1.1 Робототехниканың пайда болу жəне даму шарттары
                  </li>
                </ul>
              )}
            </li>
            <li className="read__item" onClick={() => onShow1()}>
              <h3 className="read__menu-title">Мехатрониканың анықтамалары мен терминологиясы.</h3>
              {show1 && (
                <ul>
                  <li onClick={() => setAdd(3)}>
                    Мехатрониканың анықтамалары мен терминологиясы. Мехатрондық жүйелердің құрылымы
                    және жіктелуі
                  </li>
                  <li onClick={() => setAdd(4)}>
                    2.1 Мехатрондық жүйелердің құрылымы және жіктелуі
                  </li>
                  <li onClick={() => setAdd(5)}>
                    2.1 Мехатрондық жүйелердің құрылымы және жіктелуі
                  </li>
                </ul>
              )}
            </li>
            <li className="read__item" onClick={() => onShow2()}>
              <h3 className="read__menu-title">Мехатроника принциптері.</h3>
              {show2 && (
                <ul>
                  <li onClick={() => setAdd(5)}>
                    Мехатроника принциптері. Мехатронды құрылғылардың құрылым әдістері. Мехатрондық
                    және робототехникалық жүйелердің басқару жүйелері
                  </li>
                </ul>
              )}
            </li>
            <li className="read__item" onClick={() => onShow3()}>
              <h3 className="read__menu-title">
                Өнеркәсіптік роботтар, негізгі түсініктері, жіктелуі.
              </h3>
              {show3 && (
                <ul>
                  <li onClick={() => setAdd(6)}>
                    Өнеркәсіптік роботтар, негізгі түсініктері, жіктелуі. Интелектуалды басқару
                    технологиясы. Нейроторлы құрылым технологиясы.
                  </li>
                  <li onClick={() => setAdd(7)}>4.1 Өнеркәсіптік роботтардың структурасы</li>
                </ul>
              )}
            </li>
            <li className="read__item" onClick={() => onShow4()}>
              <h3 className="read__menu-title">Өнеркəсіптік роботтардың жіктелуі.</h3>
              {show4 && (
                <ul>
                  <li onClick={() => setAdd(8)}>
                    Өнеркəсіптік роботтардың жіктелуі. Роботтардың тағайындалуы жəне қолданылу
                    салалары.
                  </li>
                  <li onClick={() => setAdd(9)}>5.1 Робот түрлері</li>
                </ul>
              )}
            </li>
            <li className="read__item" onClick={() => onShow5()}>
              <h3 className="read__menu-title">Курс жабдықтарымен танысу.</h3>
              {show5 && (
                <ul>
                  <li onClick={() => setAdd(10)}>
                    Курс жабдықтарымен танысу. LEGO MİNDSTORMS EV3 Education жинағы.
                  </li>
                </ul>
              )}
            </li>
            <li className="read__item" onClick={() => onShow6()}>
              <h3 className="read__menu-title">LEGO датчиктері және олардың параметрлері.</h3>
              {show6 && (
                <ul>
                  <li onClick={() => setAdd(11)}>LEGO датчиктері және олардың параметрлері.</li>
                  <li onClick={() => setAdd(12)}>7.1.1. Микроконтроллер</li>
                  <li onClick={() => setAdd(13)}>7.1.2. Қозғалтқыштар</li>
                  <li onClick={() => setAdd(14)}>7.1.3. Датчиктер</li>
                  <li onClick={() => setAdd(15)}>Түс сенсоры</li>
                </ul>
              )}
            </li>
            <li className="read__item" onClick={() => setAdd(16)}>
              <h3 className="read__menu-title">EV3 БАҒДАРЛАМАЛЫҚ ҚҰРАМЫ</h3>
            </li>
            <li className="read__item" onClick={() => onShow7()}>
              <h3 className="read__menu-title">Роботтарды бағдарламалау тілдері.</h3>
              {show7 && (
                <ul>
                  <li onClick={() => setAdd(17)}>
                    Роботтарды бағдарламалау тілдері. Роботқа бағытталған тілдердің сипаттамасы.
                  </li>
                  <li onClick={() => setAdd(18)}>Ассамблер тілі</li>
                  <li onClick={() => setAdd(19)}>Java</li>
                  <li onClick={() => setAdd(20)}>MATLAB</li>
                  <li onClick={() => setAdd(21)}>Python</li>
                </ul>
              )}
            </li>
            <li className="read__item" onClick={() => onShow8()}>
              <h3 className="read__menu-title">Arduino платформасы туралы жалпы ақпарат.</h3>
              {show8 && (
                <ul>
                  <li onClick={() => setAdd(22)}>
                    Arduino платформасы туралы жалпы ақпарат. Ақпараттық бөлік. Arduino тақталары
                  </li>
                  <li onClick={() => setAdd(23)}>Arduino Mega дегеніміз не?</li>
                  <li onClick={() => setAdd(24)}>Arduino Nano дегеніміз не?</li>
                  <li onClick={() => setAdd(25)}>Arduino Pro Mini дегеніміз не?</li>
                  <li onClick={() => setAdd(26)}>Arduino Леонардо дегеніміз не?</li>
                </ul>
              )}
            </li>
            <li className="read__item" onClick={() => onShow9()}>
              <h3 className="read__menu-title">
                Arduino платасының негізгі компоненттері мен бөлшектері.
              </h3>
              {show9 && (
                <ul>
                  <li onClick={() => setAdd(27)}>
                    {' '}
                    Arduino платасының негізгі компоненттері мен бөлшектері.
                  </li>
                  <li onClick={() => setAdd(28)}>11.2. Arduino бөліктері</li>
                </ul>
              )}
            </li>
            <li className="read__item" onClick={() => setAdd(29)}>
              <h3 className="read__menu-title">
                Arduino бағдарламасын жүктеу, орнату және оқып үйрену
              </h3>
            </li>
            <li className="read__item" onClick={() => setAdd(30)}>
              <h3 className="read__menu-title">
                Arduino IDE-да бағдарламалау негіздері. Бағдарлама құрылымы
              </h3>
            </li>
            <li className="read__item" onClick={() => onShow10()}>
              <h3 className="read__menu-title">Arduino-да бағдарламалау.</h3>
              {show10 && (
                <ul>
                  <li onClick={() => setAdd(31)}>14.1 Бірінші бағдарлама</li>
                  <li onClick={() => setAdd(32)}>14.2 Blink бағдарламасына талдау жасау. </li>
                  <li onClick={() => setAdd(33)}>14.3 Tinkercad Circuits Arduino-мен танысу </li>
                </ul>
              )}
            </li>
            <li className="read__item read__item2" onClick={() => onShow11()}>
              <h3 className="read__menu-title read__menu-title2">Негізгі Arduino қолданбалары</h3>
              {show11 && (
                <ul>
                  <li onClick={() => setAdd(34)}>15.1 Бағдаршам программасы</li>
                  <li onClick={() => setAdd(35)}>15.2 Түймемен жарық диодты қосу</li>
                  <li onClick={() => setAdd(36)}>
                    15.3 Arduino көмегімен жаңбыр сенсорын пайдалану
                  </li>
                </ul>
              )}
            </li>
          </ul>
        </div>
        <div className="readRight">
          {add === 1 && (
            <>
              <h2 className="readRight__title">
                Кіріспе. Робототехниканың және мехатрониканың даму тарихы.
              </h2>
              <p className="readRight__descr">
                <p>
                  Робототехника – автоматтандырылған техникалық жүйелерді құрастырумен айналысатын
                  ғылым түрі. Робототехника - зерттеу обьектісі робот болып табылатын ғылым. Робот –
                  бұл индустрия. Роботтарды көп жағдайда эксприментті мысалы; аз санды және
                  практикада аз қолданылатын деп қарастыруға болады. Бірақ робот жасау және
                  роботтарды қолдану аса ірі сала болып табылады. Роботтарды жасаудағы мақсат –
                  адамға ауыр, қажытатын, денсаулығына зиян, қызмет түрлерін солардың міндетіне беру
                  болып табылады. Робототехника екіге бөлінеді өдірістік және арнайы. Өнеркәсіптік
                  робот дегеніміз ойлау қабілеті жоқ, қозғалмалы автоматикалық машина, ол бірнеше
                  қозғалыс дәрежелері бар манипулятор түріндегі атқару құрылғысынан және өндірістік
                  үрдісте қозғалу және басқару функциясын орындауға арналған қайта бағдарламаланатын
                  құрылғысынан тұрады.
                </p>
                <p>
                  Робототехника (робот және техника; ағылш. Robotics – роботика, роботехника) –
                  роботтардың құрылысы, жұмысы, қолдануымен айналысатын, оған қоса оларды басқару,
                  сезіну, мәлімет өңдеумен айналысатын механикалық, электронды инженерия мен
                  компьютер ғылымдарының біріккен саласы. Сондай-ақ робототехника роботтардан басқа
                  автоматтандырылған техникалық жүйелер мен өндірістік үдерістердің ең жаңа
                  техникалық жиынтықталуын әзірлеу мен қолдану жолдарын зерттейтін ғылым.
                </p>{' '}
                <p>
                  {' '}
                  Pобот - чех сөзі, оны чех жазушы - сатиригі Карл Чапек ағасы Йозфпен бірлесіп
                  «R.U.R» (Rossum’s Universal Robots, 1917 жыл, 1921 жылы жарыққа шықты) пьесса үшін
                  ойлап тапқан. Бір қызығы, пьесса адам тәріздес машинаның адамдарға қарсы
                  көтерілісі туралы әңгімелейді. Сюжет бойынша, роботтар бірінші міндетте өз түрін
                  қалыптастыруға арналған өндіріспен айналады. Олар жер шарын тез толтырып және
                  барлық жұмысты өзіне алады, нәтижесінде адамзат түгелдей дерлік нашарлайды.
                  Ақырында роботтар көтерілісті бастайды. Карелдің идеясы замандастарының
                  ақыл-парасатын қозғағаны соншалық, бірінші пьессаның қойылымынан кейін Лондонда
                  жазушы бір мезетте атақты болып шыға келеді.
                </p>
                <p>
                  Роботтық жүйелер физикалық немесе бағдарламалық жасақтамаға негізделген
                  роботтармен басқарылатын автоматтандыру мен механикалық ұтқырлықты қамтитын
                  жүйелер. Бұл жүйелер көптеген әртүрлі салаларда және қолданбаларда қолданылады
                  және бірқатар тапсырмаларды орындау үшін әртүрлі сенсорларды, жетектерді және
                  бағдарламалық құрал құрамдастарын қамтуы мүмкін. Роботтық жүйелердің кейбір
                  негізгі компоненттері болуы мүмкін:
                </p>{' '}
                <p>
                  <i>Сенсорлар:</i> роботтар қоршаған ортаны сезіну үшін әртүрлі сенсорларды
                  пайдалана алады. Мысалы, олар кескін сенсорлары, ультрадыбыстық сенсорлар,
                  лазерлік сканерлер, жылу камералары сияқты әртүрлі сенсорлардың көмегімен қоршаған
                  ортадағы нысандарды анықтай алады.
                </p>{' '}
                <p>
                  <i>Атқарушы механизмдер:</i> Роботтық жүйелер физикалық тапсырмаларды жылжыту
                  немесе орындау үшін пайдаланылатын жетектерді қамтиды. Бұл жетектер қозғалтқыштар,
                  сызықтық жетектер, гидравликалық цилиндрлер және пневматикалық жүйелер сияқты
                  компоненттерді қамтуы мүмкін.
                </p>{' '}
                <p>
                  <i>Басқару блогы:</i> роботтың функционалдығын үйлестіретін және басқаратын
                  бағдарламалық немесе аппараттық басқару блогы бар. Бұл құрылғы роботтың сенсор
                  деректерін талдайды және жетектерді бағыттайды.
                </p>
              </p>
            </>
          )}
          {add === 2 && (
            <>
              <h2 className="readRight__title">
                1.1 Робототехниканың пайда болу жəне даму шарттары
              </h2>
              <p>
                <p>
                  Ғылым мен техниканың кез-келген саласының пайда болуы жəне дамуы белгілі бір уақыт
                  аралығында жүретін, басқа да объективтік жəне субъективтік себептер мен
                  жағдайларға тəуелді жəне өзара байланысты күрделі үрдіс болып табылады. Кейбір
                  жағдайларда осы немесе басқа техникалық құрал ерте пайда болады да, осы техникамен
                  байланысты нақты ғылыми бағыттың дамуына алғы шарттар тудырады.
                </p>{' '}
                <p>
                  Даму тарихы, сонымен қатар, роботтар мен басқа да мехатрондық құрылғылардың пайда
                  болу жəне жетілдірілу үрдісі-жаңа техниканы құру, сондай-ақ, ғылыми бағыттарды
                  дамытудағы күрделі себеп-салдар байланысы туралы куəлəндіреді. Мысалы, алдымен
                  роботтар құрылды, содан кейін, роботтардың қолданылуына байланысты ғылыми бағыт –
                  робототехника қалыптасты. Сонымен қатар, кей жерлерде алдымен примитивтік, содан
                  кейін, біршама күрделі мехатрондық құрылғыларды құру үшін параллельді түрде ғылыми
                  білімдер саласында алғы шарттар құрылды жəне тəжірибе жинақтау кезінде шарттар
                  дайындалды. Микроэлектрониканың негізінде, басқаратын жəне ақпараттық жүйелері бар
                  жаңа техникалық жүйелердің кең класының пайда болуы Мехатроника ғылыми саласының
                  пайда болуына жəне дамуына себеп болды. Сонымен, Робототехника Мехатрониканың
                  ғылыми бағыттарының бірі болып табылды.{' '}
                </p>
                <br />
                Роботтық жүйелердің үш түрі бар: <br />
                <br />
                1-Манпуляторлық робот жүйесі
                <br />
                <br /> 2-Мобильді робот жүйесі <br />
                <br /> 3-Деректерді жинау және басқару роботтық жүйесі
                <br />
                <br />
                <p>
                  Манипуляциялық робототехника жүйесі көбінесе өңдеу өнеркәсібінде қолданылады. Бұл
                  жүйелер 4-6 осі және әртүрлі еркіндік дәрежесі бар робот қолынан тұрады. Ол
                  паллеттеу, орау, дәнекерлеу және тасымалдау сияқты көптеген әртүрлі функцияларды
                  орындайды. Мобильді робот жүйесінің басқалардан айырмашылығы бар. Бұл жүйе өнімді
                  бір жерден екінші жерге тасымалдайтын платформалардан тұрады. Ол инженерлік
                  бағдарламалық қамтамасыз етуде де қолданылады. Деректерді жинау және басқару
                  роботтық жүйелері әртүрлі сигналдар үшін деректерді жинау, өңдеу және беру үшін
                  қолданылады. Сондай-ақ инженерлік және бизнес үшін қолданылады.
                </p>{' '}
                <p>
                  Роботтың функциясын жақсырақ түсіну үшін адамның функцияларымен салыстыра отырып
                  көрсетуге болады. 1.1-суретте адамзаттың функцияларына ұқсас роботтың функциялары
                  сандармен белгіленген. Осы функциялар төмендегідей: 1- жасанды иіс сезу; 2-
                  жасанды интеллект; 3- техникалық көру; 4- сөйлеу анализаторы; 5- сөйлеу
                  синтезаторы; 6- жасанды аяқтар (қадамдайтын аппарат); 7- жасанды білезік
                  (білезіктен бастап саусаққа дейінгі бөлім); 8- механикалық қолдар (манипулятор).
                </p>
                <p style={{ textAlign: 'center' }}>
                  <img src="/img/img1.png" />
                </p>
                1.1- сурет. Адам мен роботтың функционалдық мүмкіндіктерін салыстыру.
                <br />
                <br />
                1.1- суретте көрсетілгеніндей, механикалық қол манипулятор деп аталады. <br />{' '}
                Сондықтан да, техникалық əдебиетте «Манипуляциялық робот» термині қолданылады. Басты
                мақсаты адам қолының функцияларын суреттеу болып табылатын роботты манипуляциялық
                робот деп атаймыз.
              </p>
            </>
          )}
          {add === 3 && (
            <>
              <h2 className="readRight__title">Мехатрондық жүйелердің құрылымы және жіктелуі</h2>
              <p>
                <p>
                  Мехатроника мен робототехника - бүгінгі технологиямен өзара әрекеттесу жолында
                  төңкеріс жасайтын екі сала. Бұл жұмыс және даму бағыттары біздің күнделікті
                  өмірімізді өзгертетін интеллектуалды машиналар мен автоматтандырылған жүйелерді
                  жасау үшін өзара тоғысады. Екеуі де автоматтандырылған және автономды жүйелерді
                  жобалау, құру және бағдарламалау үшін механикалық, электронды, басқару және
                  бағдарламалық білімдерді біріктіреді.{' '}
                </p>
                <p>
                  Мехатроника – механикалық, электронды және басқарушы инженерияны біріктіретін
                  сала. Ол механикалық және электрондық компоненттерді біріктіретін жүйелерді
                  жобалау мен құруға, сондай-ақ осы жүйелерді басқару және басқару үшін
                  бағдарламалық қамтамасыз етуді әзірлеуге бағытталған. Мехатроника құрылғылар мен
                  машиналардың тиімділігі мен функционалдығын жақсартуға, олардың өнімділігін
                  оңтайландыруға және олардың процестерін автоматтандыруға бағытталған.
                </p>{' '}
                <p>
                  Мехатрониканы қолданудың кең таралған мысалы - өндірістік желідегі нақты
                  тапсырмаларды орындау үшін механикалық тұтқаларды, сенсорларды, жетектерді және
                  электронды контроллерді біріктіретін өнеркәсіптік робот. Біз сондай-ақ автономды
                  көліктер, смарт құрылғылар және өнеркәсіптегі автоматты басқару жүйелері сияқты
                  құрылғыларда мехатрониканы таба аламыз.
                </p>{' '}
                <p>
                  Робототехника роботтарды жобалауға, құрастыруға және бағдарламалауға бағытталған.
                  Робот - бұл бағдарламаланған түрде немесе қоршаған ортамен әрекеттесу арқылы
                  тапсырмаларды орындай алатын автономды жүйе. Роботтарды адамдар басқара алады
                  немесе қоршаған ортаны сезіну және әрекет ету үшін сенсорлар арқылы автономды
                  түрде жұмыс істей алады.
                </p>{' '}
                <p>
                  Робототехника өнеркәсіптік робототехника, медициналық робототехника, сервистік
                  робототехника және білім беру робототехникасы сияқты әртүрлі салаларды қамтиды.
                  Өнеркәсіпте роботтар қайталанатын және қауіпті тапсырмаларды автоматтандыру және
                  тиімділік пен қауіпсіздікті арттыру үшін қолданылады. Медицинада роботтар жоғары
                  дәлдіктегі операцияларды жасап, мамандарға ауруларды диагностикалау мен емдеуге
                  көмектесе алады. Қызмет көрсету саласында роботтарды тазалау, логистика немесе
                  тұтынушыларға қызмет көрсету саласында пайдалануға болады. Робототехника білім
                  беруде ғылым, технология, инженерия және математика ұғымдарын практикалық және
                  қызықты түрде оқыту құралы ретінде қолданылады.
                </p>{' '}
                <p>
                  Мехатроника - автоматтандырылған жүйелер мен роботтарды жобалау және жасау үшін
                  машина жасау, электроника және есептеуді біріктіреді. Бұл тиімдірек және
                  функционалды өнімдер мен жүйелерді әзірлеу үшін осы үш саланың принциптерін
                  пайдаланатын пәнаралық сала. Мехатроника механикалық жүйелерді электронды
                  компоненттер мен бағдарламалық қамтамасыз етуді қолдану арқылы басқаруға және
                  автоматтандыруға болады деген идеяға негізделген. Бұл таза механикалық жүйелерге
                  қарағанда жүйелерді дәлірек, жылдамырақ және сенімдірек етуге мүмкіндік береді.
                </p>
                <p>
                  Мехатроника автомобиль өнеркәсібі, медицина, ауыл шаруашылығы, робототехника және
                  т.б. сияқты көптеген салаларда қолданылады. Мысалы, автомобиль өнеркәсібінде
                  тартқышты басқару жүйелері және бұғаттауға қарсы тежеу жүйелері мехатроникалық
                  қосымшалардың мысалдары болып табылады. Бұл жүйелер көлік жұмысын басқару және
                  оңтайландыру үшін сенсорларды, жетектерді және бағдарламалық құралды пайдаланады.
                  Әртүрлі домендер арасындағы бұл өзара әрекеттестік тапсырмаларды автономды немесе
                  жартылай автономды түрде орындай алатын құрылғыларды жасауға мүмкіндік береді. Ол
                  мехатроника, өнеркәсіптік робототехника, автоматтандыру жүйелері, автономды
                  көліктер және озық медициналық құрылғылар сияқты көптеген қосымшаларда қол
                  жетімді.
                </p>
                <p>
                  {' '}
                  Робототехника, керісінше, роботтарды жобалауға және жасауға бағытталған. Роботтар
                  – тапсырмаларды автоматты түрде орындай алатын бағдарламаланатын машиналар.
                  Робототехника қоршаған ортамен әрекеттесетін және күрделі тапсырмаларды орындай
                  алатын роботтарды жасау үшін мехатроника принциптерін пайдаланады. Мысалы,
                  өндірістік роботтар зауыттарда қайталанатын және қауіпті тапсырмаларды орындау
                  үшін қолданылады.{' '}
                </p>
                <p>
                  Мехатроника механикалық жүйелерді электроника мен компьютерлерді қолдану арқылы
                  басқаруға және жақсартуға болатын принципке негізделген. Бұл тиімді және дәл
                  жұмысты қамтамасыз ету үшін сенсорларды, жетектерді және басқару жүйелерін
                  біріктіретін жүйелерді жобалау мен енгізуді қамтиды. Мехатроника сонымен қатар
                  мехатроникалық жүйелерді басқару және бағдарламалау үшін қажетті бағдарламалық
                  қамтамасыз етуді біріктіру және әзірлеумен айналысады. Бағдарламалық қамтамасыз
                  ету жүйенің механикалық және электрондық құрамдас бөліктерінің өзара әрекеттесуіне
                  және байланысына мүмкіндік беру арқылы жүйенің үйлесімді жұмысын қамтамасыз етеді.
                </p>
              </p>
            </>
          )}
          {add === 4 && (
            <>
              <h2 className="readRight__title">
                2.1 Мехатрондық жүйелердің құрылымы және жіктелуі
              </h2>
              <p>
                <p>
                  «Жүйе» мағынасы əртүрлі контексте (мағына жағынан тыянақты текстінің бөлігі)
                  қолданылатын жəне ғылымның əртүрлі саласында кең таралған ұғым болып табылады.
                </p>
                <p>
                  Жүйені белгілі бір мақсатқа қызмет ететін, олардың арасында тұрақты қатынаста
                  болатын және бір-біріне әсер ететін элементтер тобы ретінде анықтауға болады.
                </p>{' '}
                <li>Жүйеге оның ортасындағы өзгерістер әсер етуі мүмкін.</li>
                <li>
                  Модельдеу жүйелерінде жүйенің шекарасы мен периметрі туралы шешім қабылдау қажет.
                </li>{' '}
                <li>Бұл шешім зерттеу мақсатына байланысты болуы мүмкін. </li>
                <p>
                  «Жүйе» – система, белгілі тəртіп, біркелкі деген мағынаны білдіреді. Бұл жағдайда
                  нəтижесінде материя,энергия жəне информация берілетін (жылжытылатын, қозғалатын),
                  жыйналатын, бірігіп белгілі бір операцияны(іс-əрекетті) орындауға қабілетті,
                  құраушылардың белгілі түрде өзара байланысқан жинағы (жиынтығы) жүйе деп
                  аталады.Кей жағдайда жүйені құраушы бөлшектер табиғаты жағынан əртүрлі
                  болады,мысалы, электрлік, химиялық, механикалық немесе биологиялық.
                </p>{' '}
                <p>
                  Жапония мехатроника ғылымының қалыптасуы мен дамуында маңызды рөл атқарды. Алғаш
                  рет 1969 жылы жапондық Yasukawa Electric компаниясының инженері «мехатроника»
                  сөзін механикалық және электронды инженерия салаларының қосындысын білдіреді.
                  Мехатроника 1980 жылдардың басына дейін электрлендірілген механизмді білдіреді.
                  1980 жылдардың ортасында ол механика мен электроника арасындағы шекараны белгілей
                  бастады және жылдар өте келе ол микроконтроллерлер механикалық жүйелерге олардың
                  өнімділігін арттыру, олардың өлшемдерін азайту және шығындарын азайту үшін
                  қосылатын жалпы пәнге айналды. Осы онжылдықта қолданбалардағы мехатрониканың
                  қарқынды дамуы дискеттік дискілерді, сандық басқарылатын машиналарды, өнеркәсіптік
                  роботтарды, автомобиль қозғалтқыштарын және тежеуге қарсы жүйелерді (ABS) қамтиды.
                  1990 жылдардың маңызды ерекшелігі болған телекоммуникациялық технологияларды
                  қолданудың артуына байланысты үлкен желілерге қосылған жүйелерді құру мүмкін
                  болды.
                </p>{' '}
                <p>
                  Басқаша айтқанда, мехатрондық жүйелер қорғаныс өнеркәсібі, қауіпсіздік жүйелері,
                  машина жасау өнеркәсібі, өнеркәсіптік автоматтандыру жүйелері, медицина, ауыл
                  шаруашылығы, банк ісі және тау-кен өнеркәсібі сияқты әртүрлі салаларда қолданылады
                  және олардың қолдану аясы күн санап кеңейіп келеді. Мехатрониканың ғылым саласы
                  ретінде дамуы негізінен роботтық жүйелерден басталғанымен, бүгінгі күні
                  мехатрониканың қосымшаларын көптеген салаларда табуға болады. Өнеркәсіптік
                  роботтар, түнгі көру жүйелері, мина тазалаушы роботтар, автоматты шұлықтар,
                  камералар, бейнелер, кір жуу, ыдыс жуғыш машиналар және банкоматтар сияқты жүйелер
                  мен өнімдер негізінен мехатрондық жүйелер болып табылады. Сәйкесінше 1 және
                  2-суретте көрсетілген бір қолды бекітілген және екі қолды жылжымалы робот қол
                  жүйелері өнеркәсіптің көптеген салаларында, әсіресе автомобиль өнеркәсібінде әлі
                  де қолданылатын мехатрондық жүйелердің қатарына жатады.
                </p>
                <p style={{ textAlign: 'center' }}>
                  <img src="/img/img2.png" />
                </p>
                2.1 - cурет. Kuka KR16 типті өнеркәсіптік робот қолы
                <p style={{ textAlign: 'center' }}>
                  <img src="/img/img3.png" />
                </p>
                2.2 - cурет. Көп қолды мобильді робот жүйесі
                <br />
                <br />
                <p>
                  Жоғарыда аталған жалпы мақсаттағы классикалық робот жүйелерінен басқа, гуманоид
                  роботтар да әзірленді, олар қазіргі уақытта тек демонстрациялық мақсатта
                  әзірленгенімен, мина тазалау, мина тазалау сияқты қауіпті және уақытты қажет
                  ететін жұмыстарда адам күші орнына пайдалану жоспарлануда. жақын болашақта
                  өндіріс, интеграция және тасымалдау.
                </p>
              </p>
            </>
          )}
          {add === 5 && (
            <>
              <h2 className="readRight__title">
                Мехатронды құрылғылардың құрылым әдістері. Мехатрондық және робототехникалық
                жүйелердің басқару жүйелері
              </h2>
              <p>
                <p>
                  Мехатроника - механикалық, электроника, бағдарламалық қамтамасыз ету және басқару
                  инженериясына негізделген инженерияның жоғары басқарылатын саласы. Мехатроника
                  құрылғысы қоршаған ортаны қабылдайды, алған ақпарат негізінде тиісті шешімдер
                  қабылдайды және шешімді жүзеге асырады. Мехатроника пәнін құрайтын ғылым
                  салаларының өзара байланысын 3-суреттегі сызбада келтірілгендей қорытындылауға
                  болады.
                </p>{' '}
                <p style={{ textAlign: 'center' }}>
                  <img src="/img/img4.png" />
                </p>
                3.1 – сурет. Мехатрониканы құрайтын ғылым салаларының өзара байланысы. <br />
                <br />
                <p>
                  Тиісінше, жоғарыда аталған салалардың арасында механиканың электроника және
                  бағдарламалық қамтамасыз етумен қиылысулары сәйкесінше электромеханика және
                  CAD/CAM (компьютерлік дизайн/компьютерлік өндіріс), ал электроника және
                  бағдарламалық қамтамасыз етумен басқару компонентінің ортақ жиынтығы болып
                  табылады. Сонымен қатар, суретте көрсетілген жүйені модельдеу; механиканы,
                  бағдарламалық қамтамасыз етуді және электрониканы модельдеу; механика,
                  бағдарламалық қамтамасыз ету және басқару, микроконтроллерлер; Электроника,
                  басқару және бағдарламалық қамтамасыз ету және сайып келгенде, сенсорлар
                  механикалық, электронды және басқару өрістерінің ортақ өнімдері болып табылады.
                  Аталған төрт негізгі пәннің тоғысуы мехатрониканы құрайды.
                </p>{' '}
                Мехатроника өнімдер мен өндірістік процестерді жобалауда дәлме-дәл механикалық,
                электронды, басқару және жүйелік инженерияның синергетикалық үйлесімі ретінде
                анықталады. Ол негізгі механикалық құрылым мен оны жалпы басқару арасындағы оңтайлы
                тепе-теңдікке қол жеткізуге бағытталған жүйелерді, құрылғыларды және өнімдерді
                жобалауға қатысты. Мехатроника бүгінгі күннің күрделі инженерлік мәселелеріне
                оңтайлы шешімдер үшін технологиялардың дұрыс комбинациясын анықтау және пайдалану
                үшін тар инженерлік пәндердің шекарасында жұмыс істей алатын инженерлерге
                өнеркәсіптің өсіп келе жатқан сұранысына жауап береді. Пәндер арасындағы синергияны
                түсіну инженерлік студенттерді пәнаралық салаларда жұмыс істей алатын жақсы
                коммуникаторларға және маман инженерлерден, сондай-ақ жалпы мамандардан тұруы мүмкін
                дизайнерлік топтарға жетекшілік етеді. Мехатроника қолданбалы салалардың кең ауқымын
                қамтиды, соның ішінде тұтынушылық өнім дизайнын, аспаптық құралдарды, өндіріс
                әдістерін, қозғалысты басқару жүйелерін, компьютерлік интеграцияны, процестер мен
                құрылғыларды басқаруды, кірістірілген микропроцессорлық басқарумен функционалдылықты
                біріктіруді және дәрежесі бар машиналарды, құрылғыларды және жүйелерді жобалау.
                компьютерге негізделген интеллект. Робототтық манипуляторлар, ұшақ тренажерлары,
                тартқышты басқарудың электронды жүйелері, бейімделгіш аспалар, қону шассилері, анық
                емес логикалық басқарудағы кондиционерлер, автоматтандырылған диагностикалық
                жүйелер, микро электромеханикалық жүйелер (MEMS), бейнемагнитофондар, жүргізушісіз
                көліктер сияқты тұтынушылық өнімдер - мехатрониканың мысалдары. жүйелер. Бұл жүйелер
                талап етілетін спецификацияларды қанағаттандыру, механикалық жабдыққа «интеллект»
                енгізу, әмбебаптық пен техникалық қызмет көрсету мүмкіндігін қосу және шығындарды
                азайту үшін механикалық, басқару және компьютерлік жүйелерді біріктіруге байланысты.
              </p>
            </>
          )}
          {add === 6 && (
            <>
              <h2 className="readRight__title">
                Интелектуалды басқару технологиясы. Нейроторлы құрылым технологиясы.
              </h2>
              <p>
                <p>
                  Қазіргі заманда роботтар бізді таңқалдырудан жалықпайды, олар біздің өмірімізде
                  қалыпты нарсе секілді. Олар адам денсаулығына зиян келтіретін жерлерде жұмыс
                  атқарады (мысалға, робот сапер), немесе адам қолы жетпейтін жерлерде жұмыс
                  істейді.
                </p>
                <p>
                  {' '}
                  Әрине, өнеркәсіптік роботтар адам шаруашылығындағы кеңістігінде де орын алған. Осы
                  роботтардың қажеттілігі екі мәселемен іске асырылады. Бірінші мәселе - өндіріске
                  қажеттілігі. Оларға мыналар жатады:{' '}
                </p>
                <li>
                  құрылғылардың өндірілуінің жоғарлауы; • өңделген бұйымның сапасының жоғарлауы;
                </li>
                <li>технологиялық және өндірістік прцестердің жақсаруы;</li>
                <li>еңбектің төмендетілуі.</li>
                Екінші мәселе - социалды қажеттілік.
                <li>
                  роботтандырылған кешендер жұмысшыларды ұзақ жұмыс уақытынан және ауыр физикалық
                  еңбектен босатады;
                </li>{' '}
                <li>өндірістің нашар жағдайын жояды; </li> <li>жұмыс күшін үнемдетеді.</li>
                Роботтандырудың негізгі сатылары:
                <li>роботтандыру объектісін таңдау;</li>{' '}
                <li>роботтандырылған кешеннің жобалау кезіндегі жүйені реттеу;</li>{' '}
                <li>өндіріс;</li>
                <li>кешеннің енуі.</li>
                Өнеркәсіптік роботтың түрлері
                <br /> Орындау сипаты бойынша олар былай бөлінеді:
                <li>
                  Өндірістік (технологиялық). Технологиялық процестердің негізінде жататын
                  операцияларды орындау үшін жасалған.
                </li>{' '}
                <li>
                  Транспортты-көтергіш. Осындай түрлері олар мысалға алғанда бір нәрсенің орынын
                  ауыстыру, қою және алу үшін қолданады.
                </li>{' '}
                <li>
                  Универсалды өнеркәсіптік роботтар. Бұндай роботтар өте қиын операцияларды орындау
                  үшін қолданылады.
                </li>
              </p>
            </>
          )}
          {add === 7 && (
            <>
              <h2 className="readRight__title">4.1 Өнеркәсіптік роботтардың структурасы</h2>
              <p>
                <p>
                  Өнеркәсіптік роботтар манипулятор секілді орындайтын құрылғылардан және
                  программалық басқару құрылғысынан тұрады. Өнеркәсіптік роботтың манипуляторы
                  объектілердің кеңістіктегі қозғалысы кезіндегі функцияларды орындауға арналған
                  және жабық кинематикалық жұбы бар көп буынды механизмі болып табылады.
                  Конструктивті механизм алып жүретін конструкциядан, орындайтын механизмдерден,
                  ұстап тұратын ұүрылғыдан, беріліс механизмнің жетектерінен және орын ауыстыру
                  құрылғысынан тұрады. Өнеркәсіптік роботтың басқару құрылғысы басқару
                  программасымен байланысты манипуляторға басқарудың әсерін шығару үшін және реттеу
                  үшін қажет және конструктивті өзінің басқару жүйесінен, кері байланыс құрылғысы
                  бар ақпаратты­өлшейтін жүйеден және байланыс жүйесінен тұрады. Алып жүретін
                  конструкция өнеркәсіптік роботттардың агрегаттарды және барлық құрылғыларды
                  орналастыру үшін, сонымен бірге манипулятордың қажетті қаттылығы мен беріктігін
                  қамтамасыз ету үшін қолданады. Алып жүретін конструкция корпустарды, тіректерді,
                  рамаларды, телешкаларды, порталдарды негіздеу түрінде іске асырылады. Орындаушы
                  механизм ­ манипулятордың қозғалысты біріктірілген буындарының тұтастығы, ол
                  объектіге манипуляция жасауға немесе орындалған ортаның әсері үшін жасалған.
                  Ұсталынатын механизм ­ манипулятордың аяғындағы түйіні, объектінің манипуляция
                  жасау кезіндегі белгілі жағдайда ұстап тұруға және ұстауды қамтамасыз етеді.
                  Басқару құрылғысынан келіп түсекен, сигналмен сәйкес орындаушы механизмнің
                  буынының энергиясын механикалық қозғалысқа түрлендіру үшін арналған.{' '}
                </p>
                <p>
                  Қозғалыс құрылғысы манипуляторды немесе өнеркәсіптік роботты керекті жұмыс орнына
                  орын ауыстыру үшін арналған және конструктивті жүріс бөлігінен және жетекті
                  құрылғылардан тұрады. Басқару жүйесі басқаратын сигналдарды беру және реттеу үшін
                  қажет және басқаратын пульттан, есте сақтау құрылғысынан, есептеуіш құрылғысынан,
                  манипулятордың жетектерін басқару блогынан және технологиялық құралдардан тұрады.
                  Ақпаратты ­ өлшеуіш жүйесі өнеркәсіптік роботтардың басқару жүйесінің
                  информациясын жинауға және біріншілік өңдеу арналған, ол өзі кері байланыс
                  құрылғысынан, сигналдарды салыстыру құрылғысынан және кері байланыс датчигінен
                  тұрады. Байланыс жүйесін өнеркәсіптік роботтардың және операторды немесе басқа да
                  роботтарды және тапсырманы реттеу мақсатында технологиялық құрылғылар арасындағы
                  ақпаратты алмасуын қамтамасыз ету үшін, өнеркәсіптік роботтың функционалды жүйесін
                  қадағалау және технологиялық құалдар үшін, бұзылған жайлы диагностика үшін,
                  регламентті тексіру үшін қолданады.
                </p>
              </p>
            </>
          )}
          {add === 8 && (
            <>
              <h2 className="readRight__title">
                Роботтардың тағайындалуы жəне қолданылу салалары.
              </h2>
              <p>
                <p>
                  Роботтардың көпшілігі тұрақты және механикаландырылған жұмыстарды атқару үшін
                  зауыттарда пайдаланылады. Роботтардың біз жиі еститін көптеген түрі бар. Бүгінде
                  роботтар зауыттар мен фабрикаларда, зертханаларда, тауар қоймасында, ауруханаларда
                  және басқа да көптеген өндіріс орындарында сан түрлі жұмыстар атқаруда,яғни
                  роботтар өндіріс орындарында көбірек пайдаланылады.
                </p>{' '}
                <p>
                  Зауыттардағы роботтар дәнекерлеу, сурет салу, машиналарды жүктеу, өнімдерді
                  құрастыру, қауіпті материалдармен жұмыс істеу, химикаттарды бүру, бөлшектерді
                  тексеру сияқты, т.б түрлі қызметтерді атқарады. Әлемдегі роботтардың жартысына
                  жуығы автокөліктер жасауда қолданылады.
                </p>{' '}
                <p style={{ textAlign: 'center', display: 'flex' }}>
                  <div style={{ display: 'flex', flexDirection: 'column', marginRight: '10px' }}>
                    <img src="/img/img5.png" />
                    <div style={{ textAlign: 'start', margin: 0 }}>a) Дәнекерлеу</div>
                  </div>
                  <div style={{ display: 'flex', flexDirection: 'column' }}>
                    <img src="/img/img6.png" />
                    <div style={{ textAlign: 'start', margin: 0 }}>б) Сурет салу</div>
                  </div>
                </p>
                <p style={{ textAlign: 'center', display: 'flex' }}>
                  <div style={{ display: 'flex', flexDirection: 'column', marginRight: '10px' }}>
                    <img src="/img/img7.png" />
                    <div style={{ textAlign: 'start', margin: 0 }}>c) Өңдеу</div>
                  </div>
                  <div style={{ display: 'flex', flexDirection: 'column' }}>
                    <img src="/img/img7.png" />
                    <div style={{ textAlign: 'start', margin: 0 }}> д) Кесу</div>
                  </div>
                </p>
                5.1- сурет. Роботтардың өнеркәсіпте қолдану қызметтері
                <br />
                <br />{' '}
                <p>
                  Роботтар бірлескен құрылымына, қолдану аймағына, функционалдық ерекшеліктеріне,
                  басқару әдістеріне және жұмыс істеу принциптеріне қарай әртүрлі тәсілдермен
                  жіктеледі. Бұл классификацияны бүгінгі күнге дейінгі тарихи даму тұрғысынан
                  қарастырсақ, ол өнеркәсіптік және мобильді роботтар ретінде көрінеді. Өнеркәсіптік
                  роботтар буындар санына және функционалдық ерекшеліктеріне қарай жіктелсе,
                  мобильді роботтар әдетте жұмыс принциптеріне, сандарына, өлшемдеріне және қолдану
                  аймағына қарай жіктеледі. Сонымен қатар, осы жіктеулерден басқа, өнеркәсіптік және
                  мобильді роботтарда әртүрлі құрылғылармен адам мен роботтың өзара әрекеттесуін
                  қашықтықтан орындауға мүмкіндік беретін гаптикалық жүйелер басқа классификация
                  ретінде пайда болады. Мобильді роботтар; Олар гуманоидты роботтар, мультироботтар,
                  басқарылатын роботтар, микро нано роботтар, биологиялық роботтар, бірлескен
                  роботтар және сенсорлар ретінде жіктеледі.
                </p>{' '}
                <p>
                  {' '}
                  ISO 8373 стандартымен анықталған ерекшеліктерге сәйкес өнеркәсіптік робот «үш
                  немесе одан да көп бағдарламаланатын осі бар, бір жерде бекітілген немесе
                  дөңгелектері бар өнеркәсіптік қолданбаларда қолданылатын автоматты басқарылатын,
                  бағдарламаланатын, көп мақсатты манипулятор» ретінде анықталады. Бағдарламалану
                  және жұмысты өздігінен орындау мүмкіндігі өнеркәсіптік роботтарға өндіру, кесу,
                  тасымалдау және құрастыру сияқты көптеген тапсырмаларды орындауға мүмкіндік берді.
                  Өнеркәсіп өндірісі жеделдеді, еңбек шығындары азайып, өнім көлемі бірнеше есе
                  артты. Адамның қателіктері маңызды болып табылатын, адам өміріне қауіп төндіретін,
                  назар мен дәлдікті талап ететін жұмыстарда тұрақты, қайталанатын, жоғары өнімділік
                  нәтижелеріне қол жеткізілді. Өнеркәсіптік роботтар функцияларына, өлшемдеріне,
                  сезімталдығына, қуатына, қолданылатын энергиясына, басқару әдісіне, қозғалыс
                  қабілетіне және буын құрылымына қарай әртүрлі тәсілдермен жіктеледі. Дегенмен, ол
                  негізінен алғашқы үш мүшенің белгілеріне қарай жіктеледі және концептуалды түрде
                  осылай көрсетіледі. Аяқ-қолдарының құрылысына қарай декарттық, цилиндрлік,
                  сфералық, айналмалы буынды және скара тәрізді роботтар болып жіктеледі.
                </p>{' '}
                <p>
                  Робот қоршаған әлеммен әрекеттескен кезде адамның (жануарлардың) қызметтері мен
                  ісәрекеттерін ішінара немесе толық атқарады. Алғашқы роботтар адамның қозғалысы
                  мен сырт пішінін қайталады. Олар ойын-сауық мақсаттарында пайдаланылды.Қазіргі
                  кезде тұрмыстағы көптеген қызметтерді атқаратын, қадағалайтын, мүгедектер мен
                  сәбилерге көмекші, көңілін аулайтын, т.б. Роботтар жасалынды, интеллектуалдық
                  роботтар да пайда бола бастады.
                </p>
              </p>
            </>
          )}
          {add === 9 && (
            <>
              <h2 className="readRight__title">5.1 Робот түрлері</h2>
              <p>
                <img className="ic" src="img/ic6.png" alt="" />
                <p>
                  Соңғы 17 жылда «da Vinci» хирург роботтарының көмегімен әлем бойынша 3 миллионға
                  жуық науқасқа ота жасалды. Da Vinci – дәрігерге ота жасау аймағын HDсапада көруге
                  мүмкіндік беретін хирургиялық жүйе. Ол ота аймағында кедергісіз жұмыс жасау үшін
                  кішкентай пішінмен жасалды.
                </p>{' '}
                <p style={{ textAlign: 'center' }}>
                  <img src="/img/img8.png" />
                </p>
                5.2- сурет. Хирург робот
                <br /> <br />
                <p>
                  Аспазшы робот - құрылғыны жеке робот емес, тұтастай асхана деп санауға болады.
                  Аспазшының орнын басатын роботтың адамға сәйкестендірген екі қолы бар. Осы екі
                  қолының көмгімен ақылды құрылғы мәзірде тапсырыс берген пәрмен бойынша бұйрықты
                  орындайды. Адам қанша уақытта дәмді ас әзірлей алса, робот та дәл сол уақытта және
                  дәмді тамақ жасауға қауқарлы. Бұл робоасхана сатылымға 2018 жылдан бастап шығады.
                </p>
                <p style={{ textAlign: 'center' }}>
                  <img src="/img/img9.png" />
                </p>
                5.3- сурет. Аспазшы робот <br /> <br />
                <p>
                  Бақташы робот – құрылғы қазіргі уақытта енді құрастырылуда. Соңғы сынақ кезеңінің
                  нәтижесі бойынша, SwagBot мал бағуға, заттарды орынынан жылжытуға, бау-бақшаға
                  қарауға өте тиімді робот. Бұл құрылғыны жасау үшін Сидней Университетінің
                  ұстаздары аянбай тер төгуде.
                </p>{' '}
                <p style={{ textAlign: 'center' }}>
                  <img src="/img/img10.png" />
                </p>
                5.4- сурет. Бақташы робот <br /> <br />
                <p>
                  Киберфермер - фермерлік шаруашылықты жандандыру үшін бұл салада роботтардың
                  бірнеше түрі дайындалған. Бау-бақша жемістерін егіп, оны баптап, жемісін теріп
                  алуға жағдай жасайтын ол бүгінгі күннің таптырмас құрылғысы. Баубақша
                  техникаларының қатарына қосылған тағы бір робот – AgBot. Оның қызметі – бақшаны
                  химиялық және механикалық тәсілмен барлық арамшөптен арылту. Сонымен қоса, егін
                  топырағын тыңайтады.
                </p>{' '}
                <p style={{ textAlign: 'center' }}>
                  <img src="/img/img11.png" />
                </p>
                5.5- сурет. Баубақша робот <br />
                <br />
                <p>
                  Қойма роботы - қоймадағы жүкті бір орыннан екінші орынға қозғалту үшін ойлап
                  табылған құрылғы. Жұмысшыларға айлық төлегеннен гөрі осындай құрылғыларды сатып
                  алып өз жұмыстарын ілгері жүргізіп жатқан компаниялар көп. Мысалы, 2015 жылы
                  Қытайдың Everwin Precision Technology компаниясы жұмысшыларының 90% дәл осындай
                  роботтарға ауыстырды.
                </p>{' '}
                <p style={{ textAlign: 'center' }}>
                  <img src="/img/img12.png" />
                </p>
                5.6- сурет. Қойма роботы <br />
                <br />{' '}
                <p>
                  Тасымалдаушы дрон - жүктерді жеткізу қызметі үшін таптырмас құрылғы. Адамдардың
                  қызметтік орнын басқан роботты биылғы жылдан бастап қолдана бастады. Жаңа
                  Зеландияның Domino’s Pizza қызметкерлері жұмыстарына көмек ретінде осы құрылғының
                  көмегімен пицца жеткізуді бастап кетті.
                </p>{' '}
                <p style={{ textAlign: 'center' }}>
                  <img src="/img/img13.png" />
                </p>
                5.7- сурет. Тасымалдаушы дрон
                <br />
                <br />{' '}
                <p>
                  Күзетші робот - шетелдік ойын-сауық орталықтарының көлік тұрақтарында қарауылдың
                  қызметін осындай арнайы роботтар атқарады. Жартыметрлік күзетшінің кеудесіне
                  камера орнатылып, GPS қойылады. Бұл аппараттар Сан-Франциско және Калифорния
                  қалаларында өз қызметін бастап кетті.
                </p>{' '}
                <p style={{ textAlign: 'center' }}>
                  <img src="/img/img14.png" />
                </p>
                5.8- сурет. Күзетші робот
                <br />
              </p>
            </>
          )}
          {add === 10 && (
            <>
              <h2 className="readRight__title">
                Курс жабдықтарымен танысу. LEGO MİNDSTORMS EV3 Education жинағы.
              </h2>
              <p>
                <p>
                  LEGO MİNDSTORMS EV3 Education жинағы – бұл жай конструктор емес, ол көптеген
                  күрделі электронды кұрамдас бөліктерден тұратын роботтардың конструкторы болып
                  табылады.
                </p>
                <i>Бөлшектер 4 топты құрайды:</i> <br />
                <li>1. Электронды құрамдас бөліктер:</li>
                <li>- EV3 модулі.</li>
                <li>- Датчиктер.</li>
                <li>- Моторлар.</li>
                <li>- Байланыстырушы кабельдер.</li>
                <li>2. Тегершіктер, дөңгелектер және белдіктер.</li>
                <li> 3. Байланыстырушы элементтер.</li>
                <li>4. Құрастырымдылық элементтер</li>
                <br />
                <p style={{ textAlign: 'center' }}>
                  <img src="/img/img15.png" />
                  <br />
                  <li>6.1- сурет. LEGO MİNDSTORMS EV3 Education жинағы</li>
                </p>
                <br />
                <p>
                  {' '}
                  LEGO® MINDSTORMS® EV3 жинағының құрамына 541 бөлшек кіреді. LEGO® (жанындағы
                  көрінісі) жинағы бөлшектерін сенімді сақтауды қамтамасыз ету үшін төзімді
                  пластикалық қорапта ұсынылып отыр.
                </p>{' '}
                <p>
                  Қораптың жоғарыдан қарағандағы көрінісі. Қораптың қақпағын ашқанда Базалық Жинақ
                  (Core Set) атауы бар картонды мұқабаны көресіздер.
                </p>{' '}
                <p>
                  Картонның астында қызыл түсті сұрыпталған жаймада LEGO® бөлшектері жинақталған.
                  Бұл өз кезегінде құрастыру үрдісін оңтайландыруды және бөлшектердің дұрыс тәртіпте
                  сақталуын қамтамасыз етеді.
                </p>{' '}
                <br />
                <p style={{ textAlign: 'center' }}>
                  <img src="/img/img16.png" />
                  <li>6.2 - сурет. LEGO MİNDSTORMS EV3 Education жинағының бөлшектері</li>
                </p>
                <br />{' '}
                <ol start="1">
                  <li>1. Табан шынжырлардың жинағы;</li>
                  <li>2. Түрлі ұзындықтағы және түрдегі бөренелер;</li>
                  <li>3. Байланыстырушы сымдар;</li>
                  <li>4. Декорға арналған элементтер;</li>
                  <li>5. Түрлі байланыстырушы элементтер;</li>
                  <li>6. Түрлі көлемдегі тегершіктер;</li>
                  <li>7. Түрлі көлемдегі дөңгелектердің жинағы;</li>
                  <li>8. Түрлі ұзындықтағы белдіктердің жинағы;</li>
                  <li>9. Компьютерге қосылуға арналған USB кабель;</li>
                  <li>10. Бағдарламасы жазылған CD-диск;</li>
                  <li>11. Қос иіндер;</li>
                  <li>12. Қайта қуаттандырылатын Li-Ion аккумуляторлық батареясы;</li>
                  <li>13. EV3 микроконтроллері;</li>
                  <li>14. 2 үлкен мотор;</li>
                  <li>15. Орташа мотор;</li>
                  <li>16. Ультрадыбысты датчик;</li>
                  <li>17. Гироскопиялық датчик;</li>
                  <li>18. Жанасу датчигі;</li>
                  <li>19. Түс датчигі;</li>
                  <li>20. Қуаттандыру құрылғысы.</li>
                </ol>{' '}
                <br />
                <p>
                  LEGO MINDSTOMS EV3 көмегімен робот жасауды бастамас бұрын, компьютерімізге
                  бағдарламалық құралды орнату керек. Бұл бағдарламалық құрал арқылы біз компьютер
                  арқылы бағдарламалай аламыз. Ол үшін төмендегі сілтемені басу арқылы «LEGO
                  Mindstorms Education EV3» бағдарламалық құралын компьютеріңіздің мүмкіндіктеріне
                  сәйкес және қалаған тілде жүктеп алуға болады.
                </p>
                <a href=" https://education.lego.com/en-us/downloads/mindstorms-ev3/software/">
                  {' '}
                  https://education.lego.com/en-us/downloads/mindstorms-ev3/software/
                </a>{' '}
                <p style={{ textAlign: 'center' }}>
                  <img src="/img/img17.png" />
                  <li> 6.3 - сурет. LEGO MİNDSTORMS EV3 Education бағдарламалық құралы</li>
                </p>
                <br /> <p>Бұл бөлімде біз келесі мәзір тақырыптарын бір-бірден көреміз.</p>{' '}
                <ol>
                  <li>1. Start Here</li>
                  <li>2. New Project</li>
                  <li>3. Tutorials (Robot Educator)</li>
                  <li>4. Building Instructions</li>
                  <li>5. Design Engineering Projects</li>
                  <li>6. Space Challenge</li>
                  <li>7. Science</li>
                </ol>
                “Start Here” мәзірінде;
                <li>Preapre</li>
                <li>Try </li>
                <li>Use</li>
                Next Steps - сияқты ішкі мәзірлер бар. Біз осы мәзірлердегі қадамдарды орындау
                арқылы «LEGO Mindstorms EV3» бағдарламалауды оңай бастай аламыз. Бірінші қадамнан
                бірге бастайық.
                <p style={{ textAlign: 'center' }}>
                  <img src="/img/img18.png" />
                  <li> 6.4 - сурет. Бағдарламаның алғашқы беті</li>
                </p>
                <br /> «Prepare» ішкі мәзірін басқан кезде біз үшін жасалған кейбір қадамдарды
                көреміз. Жаңа жобамен жұмыс істеу кезінде жоғарыда көрсеткен 1 немесе 2 бөлімдерді
                басу арқылы төменде жаңа жоба бетін және жаңа бағдарлама беттерін жасауға болады.
                <p style={{ textAlign: 'center' }}>
                  <img src="/img/img19.png" />
                </p>
              </p>
            </>
          )}
          {add === 11 && (
            <>
              <h2 className="readRight__title">LEGO датчиктері және олардың параметрлері.</h2>
              <p>
                <p>
                  Lego Education Mindstorms EV3 - бұл оқу орындары үшін арнайы әзірленген білім беру
                  робототехника платформасы. Оның көмегімен студент бірінші сабақта өзінің алғашқы
                  роботын жасай алады.
                </p>{' '}
                <p style={{ textAlign: 'center' }}>
                  <img src="/img/img20.png" />
                </p>
                7.1-сурет. Lego Education Mindstorms EV3 жинағы{' '}
                <p>
                  Датчиктердің көмегімен робот айналасындағы әлемді қабылдайды және қозғалтқыштардың
                  арқасында бағдарламаланған бағдарламаға сәйкес оған әрекет етеді. LEGO Mindstorms
                  EV3 негізгі жиынтығы – роботтық жобаларды әзірлеуге қажетті негізгі құрамдастарды
                  қамтитын жиынтық. Бұл жинақ төмендегі кестеде көрсетілген жабдықпен бірге
                  жеткізіледі.
                </p>{' '}
                <br />
                <p>Кесте 7.1. LEGO Mindstorms EV3 негізгі жиынтығы –</p>
                <table
                  width="600"
                  height="400"
                  border="1"
                  align="center"
                  cellpadding="4"
                  cellspacing="0">
                  <tr>
                    <td>№</td>
                    <td>Құрал атаулары</td>
                    <td>Саны</td>
                  </tr>
                  <tr>
                    <td>1</td>
                    <td>EV3 контроллер</td>
                    <td>1</td>
                  </tr>
                  <tr>
                    <td>2</td>
                    <td>Түс сенсоры</td>
                    <td>1</td>
                  </tr>
                  <tr>
                    <td>3</td>
                    <td>Жанасу сенсоры</td>
                    <td>2</td>
                  </tr>
                  <tr>
                    <td>4</td>
                    <td>Ультрадыбыстық сенсор</td>
                    <td>1</td>
                  </tr>
                  <tr>
                    <td>5</td>
                    <td>Гиродатчик</td>
                    <td>1</td>
                  </tr>
                  <tr>
                    <td>6</td>
                    <td>Үлкен қозғалтқыш</td>
                    <td>2</td>
                  </tr>
                  <tr>
                    <td>7</td>
                    <td>Орташа қозғалтқыш</td>
                    <td>1</td>
                  </tr>
                  <tr>
                    <td>8</td>
                    <td>Батарея</td>
                    <td>1</td>
                  </tr>
                  <tr>
                    <td>9</td>
                    <td>Кабель, 25 см</td>
                    <td>4</td>
                  </tr>
                  <tr>
                    <td>10</td>
                    <td>Кабель, 35 см</td>
                    <td>2</td>
                  </tr>
                  <tr>
                    <td>11</td>
                    <td>Кабель, 50 см</td>
                    <td>1</td>
                  </tr>
                </table>
                <br />
                <p>
                  LEGO® MINDSTORMS® EV3 жинағының құрамына 541 бөлшек кіреді. LEGO® (жанындағы
                  көрінісі) жинағы бөлшектерін сенімді сақтауды қамтамасыз ету үшін төзімді
                  пластикалық қорапта ұсынылып отыр.{' '}
                </p>
                <p>
                  Қораптың жоғарыдан қарағандағы көрінісі. Қораптың қақпағын ашқанда Базалық Жинақ
                  (Core Set) атауы бар картонды мұқабаны көресіздер.
                </p>{' '}
                <p>
                  Картонның астында қызыл түсті сұрыпталған жаймада LEGO® бөлшектері жинақталған.
                  Бұл өз кезегінде құрастыру үрдісін оңтайландыруды және бөлшектердің дұрыс тәртіпте
                  сақталуын қамтамасыз етеді.
                </p>
              </p>
            </>
          )}
          {add === 12 && (
            <>
              <h2 className="readRight__title">
                7.1. LEGO Mindstorms EV3 негізгі жинағына кіретін құрамдас бөліктер
              </h2>
              <p>
                <p>Бөлшектер 4 үлкен топты құрайды:</p>
                <p>1. Электронды құрамдас бөліктер</p>
                <ul>
                  <li> • EV3 модулі</li>
                  <li> • Датчиктер</li>
                  <li> • Моторлар</li>
                </ul>
                <p>Байланыстырушы кабельдер</p>
                <p>2. Тегершіктер, дөңгелектер және белдіктер</p>
                <p>3. Байланыстырушы элементтер</p>
                <p>4. Құрастырылымдық элементтер</p>
                <p>
                  EV3 негізгі жинағына мыналар кіреді: әртүрлі қуаттағы 3 сервомотор (2 үлкен мотор
                  және 1 орташа мотор), 5 сенсор (гироскопиялық және ультрадыбыстық сенсор,
                  жарық/түс сенсоры және 2 жанасу сенсоры және қайта зарядталатын батарея және қосу
                  кабельдері.{' '}
                </p>
              </p>
            </>
          )}
          {add === 13 && (
            <>
              <h2 className="readRight__title">7.1.1. Микроконтроллер</h2>
              <p>
                <p>
                  Платформаның миы ол микроконтроллер - экраны және кіріс/шығыс порттары бар
                  бағдарламаланатын EV3 микрокомпьютері; ол қозғалтқыштар мен сенсорлардың жұмысын
                  басқарады. Платформаның құрамдас бөліктері жинаққа кіретін арнайы кабельдер арқылы
                  қосылады.
                </p>
                <p style={{ textAlign: 'center' }}>
                  <img src="/img/img21.png" />
                  <li>7.2-сурет. Микрокомпьютер Lego Mındstorms Ev3</li>
                </p>
                <br />
                <p>
                  Ол барлық қосымша жиынтықтар үшін негіз болып табылады, өйткені оның құрамында EV3
                  микрокомпьютері, негізгі сенсорлар, қозғалтқыштар және қосымша жинақтардың
                  нұсқауларынан күрделі үлгілерді құруға қажетті құрылыс элементтері бар. 5 робот
                  моделін құрастыруға арналған. Микроконтроллердің ішінде 16 МБ тұрақты жады және 64
                  МБ жедел жады бар 300 МГц ARM процессоры бар. Студент жаттығу кезінде немесе
                  жарыстарда жасай алатын ең күрделі алгоритмдерді орындауға қуат жеткілікті.
                  Микроконтроллерде сонымен қатар қатты әуендерді ойнай алатын кіріктірілген үлкен
                  және қатты динамик бар. Микрокомпьютер 178 x 128 пиксельді монохромды СКД
                  экранымен жабдықталған, артқы жарық түсі өзгермелі. Экран мәзірді және сенсорлар,
                  суреттер және анимация деректері сияқты жұмыс кезінде қажетті кез келген басқа
                  графикалық ақпаратты көрсетеді. Сондай-ақ micro-SDHC жад карталарына арналған слот
                  және USB порты бар. USB порты мен microSDHC бағдарламаларды жүктеп алу үшін де,
                  микробағдарламаны жаңарту үшін де пайдалануға болады. USB порты хост режимін
                  қолдайды, бұл Wi-Fi адаптерін қосуға ғана емес, сонымен қатар бірнеше EV3
                  блоктарын бір күрделі роботқа қосуға мүмкіндік береді. Микроконтроллердің 4 кіріс
                  порты (1, 2, 3 және 4 порты) және 4 шығыс порты (A, B, C және D порты) бар.{' '}
                </p>
              </p>
            </>
          )}
          {add === 14 && (
            <>
              <h2 className="readRight__title">7.1.2. Қозғалтқыштар</h2>
              <p>
                <p>
                  <i>Үлкен қозғалтқыш</i>
                </p>
                <p>
                  Кірістірілген айналу сенсорының арқасында ол үлгінің тұрақты жылдамдықпен
                  қозғалуына мүмкіндік береді. Қозғалтқыш қуатты, саңылаулары бар ыңғайлы корпусы
                  бар, беріліс қорабын, барлық элементтерді орнатуды, сондай-ақ оны синхрондауды
                  мүмкіндігінше қарапайым және жылдам етеді.{' '}
                </p>
                <p style={{ textAlign: 'center' }}>
                  <img src="/img/img22.png" />
                  <li>7.3-сурет. Үлкен қозғалтқыш</li>
                </p>
                <br />
                <p>
                  <i>Орташа қозғалтқыш </i>
                </p>
                <p>
                  Ортаңғы қозғалтқыш, үлкен қозғалтқыш сияқты, 1 градус рұқсаты бар ішкі айналу
                  сенсорына ие. Ол үлкен қозғалтқышқа қарағанда кішірек, жеңіл және жылдам жауап
                  беретін құрылымға ие. Ортаңғы қозғалтқышты қосу немесе өшіру, оның қуат деңгейін
                  басқару, сіз көрсеткен уақыт кезеңі үшін немесе сіз көрсеткен бірнеше айналымдар
                  үшін арнайы бағдарламалауға болады.
                </p>
                <p style={{ textAlign: 'center' }}>
                  <img src="/img/img23.png" />
                  <li>7.4-сурет. Орташа қозғалтқыш</li>
                </p>
                <br />
                <p>
                  Үлкен қозғалтқыш минутына 160 - 170 айналыммен айналса, орташа қозғалтқыш минутына
                  240 - 250 айналыммен айнала алады. (Үлкен қозғалтқыш: 160 – 170 айн/мин; орташа
                  қозғалтқыш: 240 – 250 айн/мин). Үлкен қозғалтқыш 20 Нсм (Ньютон/сантиметр)
                  моментпен, ал орташа қозғалтқыш 8 Нсм моментпен айналады. Жұмыс істеп тұрған үлкен
                  қозғалтқышты тоқтату үшін 40 Нсм айналу моментін қолдану қажет болса, орташа
                  қозғалтқышты тоқтату үшін 12 Нсм момент қолдану қажет.
                </p>
              </p>
            </>
          )}
          {add === 15 && (
            <>
              <h2 className="readRight__title">7.1.3. Датчиктер</h2>
              <p>
                <p>
                  Барлық сенсорлар микроконтроллер арқылы автоматты түрде анықталады және
                  бағдарламалық құрал арқылы қосылған микроконтроллерді бағдарламалағанда, сіз робот
                  портына қосылған сенсор түрін бірден көре аласыз, қосылым қатесі болған жағдайда
                  бағдарламалық құрал бөлігіндегі ескерту шамы жанады.
                </p>
                <p>
                  <i>Ультрадыбыстық сенсор</i>
                </p>
                <p>
                  Бұл қуатты ультрадыбыстық құрылғы дыбыс толқындарын жасайды және олардың
                  арасындағы қашықтықты көрсете отырып, әртүрлі нысандардан толқындардың шағылуын
                  автоматты түрде жазып алады. Жоғары дәлдікпен қашықтықты өлшеу функциясына қоса,
                  сенсор нысандардың болуын көрсетеді. LEGO Education – LEGO бөліктеріне, озық білім
                  беру әдістеріне және бірегей бағдарламалық қамтамасыз етуге негізделген кәсіби
                  педагогикалық қолдануға арналған аңызға айналған LEGO оқу ойыншықтарын өндірушіден
                  арнайы білім беру жиынтықтары.
                </p>
                <p style={{ textAlign: 'center' }}>
                  <img src="/img/img24.png" />
                  <li>7.5-сурет. Ультрадыбыстық сенсор </li>
                </p>
                <p>
                  Бұл сенсор оның алдындағы нысан мен оның арасындағы қашықтықты өлшейді. Ол өлшеуді
                  орындау үшін адам құлағы ести алмайтын жиіліктегі ультрадыбыстық дыбыс толқындарын
                  пайдаланады. Датчиктен нысанға өтетін дыбыс толқындары нысанға соғылып, кері
                  қайтарылады. Объектінің қашықтығы дыбыс толқындары нысанға соғылып, кері қайтқанға
                  дейінгі уақыттан бастап анықталады. Жарқанаттар ұшып бара жатқанда кездескен
                  заттарды байқау үшін дәл осындай қасиетпен жасалғаны белгілі.
                </p>
                <p>
                  Қашықтықты дюйм немесе см бірліктерімен өлшей алады. Ол 3 - 250 см арасындағы
                  қашықтықты +/- 1 см дәлдікпен және 1 - 99 дюйм арасындағы қашықтықты +/- 0,394
                  дюймдік дәлдікпен өлшей алады. Ол 255 см немесе 100 дюйм қашықтықта орналасқан
                  нысандарды анықтай алмайды. Сенсор көзінің айналасындағы қызыл шам тұрақты жанып
                  тұрса, сенсор өлшеу режимінде. Егер қызыл шам жыпылықтаса, сенсор тыңдау
                  режимінде. Тыңдау режимінде сенсор ультрадыбыстық толқындарды шығаратын басқа
                  құрылғының болуын анықтай алады, бірақ бұл режимде қашықтықты анықтай алмайды.
                </p>
                <i>Жанасу сенсоры</i>
                <p>
                  Құрылғы сізді жоғары дәлдікпен және қарапайым жұмысымен қуантады. Оның мақсаты -
                  түйменің қанша рет басылғанын көрсету. Компьютерге сигнал жіберу, ол бір және
                  бірнеше түртуді көрсетеді. LEGO Education – LEGO бөліктеріне, озық білім беру
                  әдістеріне және бірегей бағдарламалық қамтамасыз етуге негізделген кәсіби
                  педагогикалық қолдануға арналған арнайы білім беру жиынтықтары.{' '}
                </p>
                <p style={{ textAlign: 'center' }}>
                  <img src="/img/img24.png" />
                  <li>7.6-сурет. Жанасу сенсоры</li>
                </p>
                <br />
                <p>
                  Алдыңғы жағында түймесі бар бұл сенсор арқылы сіз роботыңыздың затқа тигенін
                  немесе бір заттың роботқа тигенін анықтай аласыз, егер ол тиіп кетсе, оның роботқа
                  тигенін анықтай аласыз және роботыңызды соған сәйкес бағдарламалай аласыз. Жанасу
                  сенсорды басып шығару, босату және соққы (кенеттен басып шығару және босату)
                  әрекеттері үшін пайдалануға болады. Жанасу сенсоры түйменің басылған күшін
                  анықтамайды, ол тек басылған-басылған жоқ па, ақпаратты (логикалық деректер)
                  береді. Бұл сенсор түйме басылса, True to Brick мәнін, ал түйме босатылса, False
                  мәнін қайтарады. Тағы да, егер түйме басылса, ол True to Brick мәнін қайтарады.
                </p>
                <br />
                <p>
                  <i>Гироскопиялық датчик</i>
                </p>
                <p>
                  Бұл сандық гироскопиялық құрылғы роботыңыздың айналу қозғалысы туралы өте дәл
                  ақпарат береді. Сенсор сонымен қатар модельдің қозғалысы мен орнындағы ең аз
                  өзгерістерді көрсете алады.{' '}
                </p>
                <p style={{ textAlign: 'center' }}>
                  <img src="/img/img25.png" />
                  <li>7.7-сурет. Гироскопиялық датчик</li>
                </p>
                <p>
                  Бұл сенсор роботтың бір осьте айналу қозғалысын анықтайды. Ол көрсеткілердің
                  бағыты бойынша айналу қозғалысын секундына градуспен береді. Сенсор секундына 440
                  градусқа дейінгі айналуды өлшей алады. Осылайша сіз роботыңызды бұрылғанда немесе
                  құлағанда не істеу керектігін бағдарламалай аласыз. Бұл сенсор 90 градус айналу
                  кезінде +/- 3 градус дәлдікпен жұмыс істейді. Сенсор арқылы Smart Brick-ке
                  жіберілетін ақпарат сағат тілі бойынша + (оң) және – (теріс) сағат тілімен.
                </p>
                <br />
                <p>Сенсорлық/Түйме сенсоры (сенсорлық сенсор)</p>
                <br />
                <p>
                  Алдыңғы жағында түймесі бар бұл сенсор арқылы сіз роботыңыздың затқа тигенін
                  немесе бір заттың роботқа тигенін анықтай аласыз, егер ол тиіп кетсе, оның роботқа
                  тигенін анықтай аласыз және роботыңызды соған сәйкес бағдарламалай аласыз.
                  Сенсорлық сенсорды басып шығару, босату және соққы (кенеттен басып шығару және
                  босату) әрекеттері үшін пайдалануға болады. Сенсорлық сенсор түйменің басылған
                  күшін анықтамайды, ол тек басылған-басылған жоқ па, ақпаратты (логикалық деректер)
                  береді. Бұл сенсор түйме басылса, True to Brick мәнін, ал түйме босатылса, False
                  мәнін қайтарады. Тағы да, егер түйме басылса, ол True to Brick мәнін қайтарады.
                </p>
                <br />
                <h2 className="readRight__title">Түс сенсоры</h2>
                <p>
                  Бұл сенсор линза арқылы өтетін жарықтың түсін немесе қарқындылығын анықтай алады.
                  3 түрлі режимді пайдалануға болады. Сенсор сегіз түрлі түсті және түссіз ажырата
                  алады. Сонымен қатар, оны жарық сенсоры ретінде пайдалануға болады.
                </p>
                <p style={{ textAlign: 'center' }}>
                  <img src="/img/img26.png" />
                  <li>7.8-сурет. Гироскопиялық датчик</li>
                </p>
                <br />
                <p>
                  Сенсор түсті режимде пайдаланылған кезде қызыл, көк және жасыл жарық шығаратын
                  алдыңғы жағындағы жарық диодтары қосылады. Түс сенсоры жұмыс істеп тұрғанда,
                  үлгілерді секундына 1000 рет жинайды (1 кГц). Ол 7 түсті (қара, көк, жасыл, сары,
                  қызыл, қоңыр, ақ) анықтай алады. Ол сондай-ақ түсті анықтау мүмкін емес, яғни «түс
                  жоқ» деген ақпаратты жібере алады. Осылайша сіз роботты қабылдаған түстерге қарай
                  әртүрлі қозғалыстар жасауға немесе қабылдаған түстердің атын айтуға бағдарламалай
                  аласыз.
                </p>
              </p>
            </>
          )}
          {add === 16 && (
            <>
              <h2 className="readRight__title">EV3 БАҒДАРЛАМАЛЫҚ ҚҰРАМЫ</h2>
              <p>
                <p>
                  EV3 Brick бағдарламасын бағдарламалау үшін EV3 Lab немесе EV3 Programming
                  қолданбаларын пайдалануға болады. EV3 Lab микроконттроллерін бағдарламалауға
                  қажетті ең жан-жақты құрамдастарға ие. EV3 Бағдарламалау қолданбаларында
                  микроконттроллерді портативті құрылғыдан бағдарламалауға арналған кеңейтілген
                  практикалық шешімдер бар. Бұл бағдарламалық құралды компьютерде немесе Windows
                  жүйесі бар Mac құрылғысында пайдалануға болады.
                </p>
                <p>Ерекше өзгешеліктері:</p>
                <li>
                  • Бұл бағдарламалық құралда EV3 оңай үйренуге болатын бейне, лекция, оқулықтары
                  бар.
                </li>
                <li>
                  • Бұл бағдарламалық құралдың көмегімен сіз өзіңіздің роботыңыздағы сенсорлардан
                  деректерді жазып, графикалық интерфейсте бақылауға және талдауға болады.
                </li>
                <li>
                  • Жобаңызды мазмұн редакторларымен өзгерте аласыз. Өз дауысыңыз, бейнеңіз және
                  т.б. сіз өз файлдарыңызды жасай аласыз және оларды жобаңызда пайдалана аласыз.
                </li>
                Windows 7, Windows 8, Windows 10 (Windows RT қоспағанда) жүктеп алу сілтемесі:{' '}
                <a href="https://lewwwlives.legocdn.com/downloads/LMEEV3/LMEEV3_Full-setup_1.4.2_en-GB_WIN32.exe">
                  https://lewwwlives.legocdn.com/downloads/LMEEV3/LMEEV3_Full-setup_1.4.2_en-GB_WIN32.exe
                </a>
                <p>Жабдық</p>
                <li> • Кемінде 2 ГБ жедел жады</li>
                <li> • Кемінде 1,5 ГГц процессор</li>
                <li> • Қатты дискідегі кемінде 2 ГБ бос орын</li>
                <li> • USB порты немесе Bluetooth 2.0 және одан жоғары</li>
                <li> • Ажыратымдылығы 1024 x 600 кем емес экран</li>
                Mac OS X 10.6 (Snow Leopard) немесе одан кейінгі нұсқасына қолдау көрсетіледі.
                Жүктеп алу сілтемесі:{' '}
                <a href="https://le-www-live-s.legocdn.com/downloads/LME-EV3/LMEEV3_Full-setup_1.4.2_en-GB_OSX.dmg">
                  https://le-www-live-s.legocdn.com/downloads/LME-EV3/LMEEV3_Full-setup_1.4.2_en-GB_OSX.dmg
                </a>
                <p>Жабдық</p>
                <li> • Кемінде 2 ГБ жедел жады</li>
                <li> • Кемінде 1,5 ГГц процессор</li>
                <li> • Қатты дискідегі кемінде 2 ГБ бос орын</li>
                <li> • USB порты немесе Bluetooth 2.0 және одан жоғары</li>
                <li> • Ажыратымдылығы 1024 x 600 кем емес экран</li>
                <p>
                  <i>Жобаның құрылымы мен ерекшеліктері</i>
                </p>
                <p>
                  Лобби қойындысының жанындағы + белгісін басу арқылы Файл мәзірінен ашылмалы
                  мәзірден Жаңа жоба тармағын таңдау қажет. Бағдарлама (Program)/Эксперимент
                  (Experiment) параметрін таңдау арқылы бағдарламаны немесе экспериментті жасауға
                  әрекеттенгенде, жоба қалтасы EV3 бағдарламалық құралы арқылы автоматты түрде
                  жасалады. Бұл жоба қалтасында бағдарлама және эксперимент файлдары, кескіндер,
                  дыбыстар, бейнелер, нұсқаулар және сол жобаға қатысты барлық нәрсе сақталады
                  (Сурет 8.1).
                </p>
                <p style={{ textAlign: 'center' }}>
                  <img src="/img/img28.png" />
                  <li>8.1-сурет. EV3 бағдарламалық құрал қойындылары</li>
                </p>
                <p>
                  EV3 бағдарламалық құралы арқылы автоматты түрде жасалған жоба қалтаңыз Лобби
                  қойындысының жанында жаңа қойынды ретінде пайда болады. Басқаша айтқанда, жоба
                  қалтасының атауы Лобби қойындысы орналасқан қара жолақта көрсетіледі.
                </p>
                <br />
                <p style={{ textAlign: 'center' }}>
                  <img src="/img/img29.png" />
                  <li>8.2-сурет.Жоба сипаттары беті</li>
                </p>
                <p>
                  Сурет көрсетілгендей бұл терезені ашқан кезде жобаңызда пайдаланылатын барлық
                  бағдарламаларды, эксперименттерді, кескіндерді, дыбыстарды, бейнелерді және басқа
                  мазмұнды біріктірілген түрде көре аласыз. Лоббиде жобаны алдын ала қарау үшін
                  тақырып беруге, сипаттама енгізуге және жобаңыз туралы суреттер мен бейнелерді
                  қосуға болады (Сурет 8.2). Мұнда сіз өз жобаңызда пайдаланатын барлық мазмұнды
                  (бағдарламалар, эксперименттер, кескіндер, дыбыстар, блоктар және т.б.) қойындылар
                  ретінде көре аласыз (Сурет 8.3). Осы құсбелгіні қойсаңыз, Daisy Chain режимін
                  қосуға болады. 4 EV3 микроконтроллеріне дейін бірге қосуға болады (Сурет 8.4).
                </p>
                <p style={{ textAlign: 'center' }}>
                  <img src="/img/img30.png" />
                  <li>8.3-сурет.Бағдарламаны құру терезесі</li>
                </p>
                EV3 бағдарламалау ортасы 5 негізгі бөліктен тұрады;
                <li>
                  1. Бағдарламалау кенеп: Сіздің бағдарламаңызды құрайтын блоктар осы жерде
                  орналасқан. (Сурет 8.3. №1 )
                </li>
                <li>
                  2. Бағдарламалау палитралары: Бұл бөлімде бағдарламаңызды жасау үшін пайдалануға
                  болатын барлық блоктар әртүрлі түстері бар санаттарға бөлінген. (Сурет 8.3. №2)
                </li>
                <li>
                  3. Аппараттық құрал беті: Бұл бөлімнен EV3 Brick қосылған-қоспағанын және
                  қозғалтқыш пен сенсордың кірпіште қай портта екенін көре аласыз; Бағдарламаңызды
                  EV3 Brick-тің миына осы жерден жүктей аласыз. (Сурет 8.3. №3)
                </li>
                <li>
                  4. Мазмұн редакторы: Бұл бағдарламалық құралға біріктірілген сандық жұмыс кітабы.
                  Жобада пайдаланылған мәтінді, суреттерді және бейнелерді немесе нұсқауларды көре
                  аласыз. (Сурет 8.3. №4)
                </li>
                <li>
                  5. Бағдарламалау құралдар тақтасы: Бағдарламамен байланысты жұмысыңыз үшін бірнеше
                  негізгі құралдар бар. (Сурет 8.3. №5)
                </li>
                <p style={{ textAlign: 'center' }}>
                  <img src="/img/img31.png" />
                  <li>8.4-сурет. Әрекет блоктары</li>
                </p>
                Жасыл қойынды / Әрекет блоктары
                <br />
                <br />
                Жасыл түсті қойындыда 7 түрлі блок бар:
                <li>1. Орташа қозғалтқыш блогы</li>
                <li>2. Үлкен қозғалтқыш блогы</li>
                <li>3. Тасымалдаушы руль блогы</li>
                <li>4. Тасымалдаушы цистерна блогы</li>
                <li>5. Экранды блогы</li>
                <li>6. Дыбыс блогы</li>
                <li>7. Күй жарық блогы</li>
                <br />
                Қызғылт сары қойындыда 5 түрлі блок бар:
                <p style={{ textAlign: 'center' }}>
                  <img src="/img/img32.png" />
                  <li>8.5-сурет. Ағынды басқару блоктары</li>
                </p>
                Ағынды басқару блоктары
                <li>1. Бастау блогы</li>
                <li>2. Күту блогы</li>
                <li>3. Цикл блогы</li>
                <li>4. Кілт блогы</li>
                <li>5. Циклді аяқтау блогы</li>
                <br />
                <br />
                Сары түсті қойындыда 11 түрлі блок бар:
                <li>1. Ақылды микроконтроллер түймелер блогы</li>
                <li>2. Түс сенсорының блогы</li>\<li>3. Гироскоптың сенсор блогы</li>
                <li>4. Инфрақызыл сенсор блогы</li>
                <li>5. Қозғалтқыштың айналу сенсорының блогы</li>
                <li>6. Жылу сенсорының блогы</li>
                <li>7. Таймер блогы</li>
                <li>8. Жанасу сенсоры блогы</li>
                <li>9. Ультрадыбыстық сенсор блогы</li>
                <li>10. Энергияны өлшеу блогы</li>
                <li>11. NXT дыбыс сенсорының блогы</li>
              </p>
              <p style={{ textAlign: 'center' }}>
                <img src="/img/img33.png" />
                <li>8.6-сурет. Сенсор блоктары</li>
              </p>
            </>
          )}
          {add === 17 && (
            <>
              <h2 className="readRight__title">
                Роботтарды бағдарламалау тілдері. Роботқа бағытталған тілдердің сипаттамасы.
              </h2>
              <p>
                <p>
                  Бағдарламалау қазіргі ғылымның маңызды бағыттарының бірі болып табылады және
                  роботтарды, желілерді және спутниктерді дамытуда маңызды рөл атқарады. Осы
                  салалардың әрқайсысына сәйкес келетін көптеген бағдарламалау тілдері бар, олардың
                  ішінде ең маңыздылары BASIC/Pascal болып табылады. Олар көптеген робот тілдеріне
                  кіріспе болып саналады және олар әртүрлі электроникалық құрылғыларды
                  бағдарламалауда кеңінен қолданылады. Сонымен қатар, Raspberry Pi сияқты кейбір
                  құралдар және Python сияқты бағдарламалау тілдері спутниктік бағдарламалау үшін
                  қолданылады. Спутниктерді бағдарламалау үшін қолайлы бағдарламалау тілдерін дәл
                  анықтау мүмкін емес. C/C, Java, Fortran, Python және т.б. сияқты танымал тілдерге
                  роботтар мен желілерді бағдарламалау үшін сенуге болады. Осы салаларға сәйкес
                  келетін көптеген бағдарламалау тілдері бар болса да, бағдарламашылар бизнес
                  қажеттіліктері мен қолданылатын құралдар негізінде сәйкес тілді таңдауы керек.
                </p>
                <p>
                  Ғылым, техника және технологияны біріктіретін сала – робототехника. Ол адамның
                  іс-әрекетін қайталай алатын, тіпті оларды көптеген жағынан алмастыра алатын
                  машиналарды жасау үшін зерттеулер жүргізеді. Робототехникаға «ақылды»
                  механизмдерді, яғни роботтарды жобалау, жасау және бағдарламалау кіреді. Олар
                  аэроғарыш, денсаулық сақтау, электронды коммерция, ғарышты игеру, көлік және басқа
                  салаларда қолданылады.
                </p>
                <p>
                  Қазіргі уақытта робототехника өте жылдам қарқынмен дамып келе жатқан салалардың
                  біріне айналды. Чех фантаст-жазушысының беттерінен келетін болсақ, нақты өмірде
                  бұл оқиғалар әртүрлі салаларға бөлінеді.
                </p>
                <p>Мұнда робототехниканың бес негізгі бағыты берілген:</p>
                <p>
                  <li>
                    • Оператор интерфейсі. Бұл робот пен контроллер (оның әрекетін басқаратын адам)
                    арасындағы өзара әрекеттесу аймағы. Адам мен машинаны сенсорлық тақта, джойстик
                    және т.б. арқылы қосуға болады.
                  </li>
                  <li>
                    {' '}
                    • Қозғалыс немесе қозғалу. Робот түріне байланысты машинаның кеңістікте қозғалу
                    жолын орнатады. Қозғалыс үшін доңғалақтарды, қанаттарды және винттерді (мысалы,
                    дрондарда) пайдалануға болады. Егер біз гуманоидты зат туралы айтатын болсақ, ол
                    адам сияқты екі аяқпен қозғалады.{' '}
                  </li>
                  <li>
                    {' '}
                    • Манипуляторлар. Бұл термин роботтың белгілі бір әрекеттерді орындауға
                    бейімделген бөлігін білдіреді. Бұл ұстағыштар, итергіштер, тырнақтар,
                    механикалық қолдар және саусақтар сияқты машина компоненттері. Мысалы,
                    өнеркәсіптік роботтың міндеті объектілерді жылжыту болса, ол екі саусақты
                    ұстағышпен жабдықталған.
                  </li>
                  <li>
                    {' '}
                    • Сезім және қабылдау. Робототехниканың бұл саласы машинаның ғарышта қалай
                    қозғалатынына, объектілерді танитынына және қоршаған ортаға қалай әрекет
                    ететініне жауап береді. Осы өрісті пайдалана отырып, робот қозғалыс бағыты,
                    кедергілер және қажетті заттардың орналасуы туралы ақпаратты алады. Мысалы,
                    жолда кедергіге тап болғанда, оны айналып өту жолын іздейді. Машина дұрыс шешім
                    қабылдауы үшін бағдарламашы оған осындай компоненттерді енгізуі керек.
                  </li>
                  <li>
                    • Бағдарламалау. Берілген жағдайда робот әрекет ететін командаларды қамтиды.
                    Орындалатын және машина құрастырылған тапсырмаларды орындайтын компьютерлік
                    бағдарламаны жобалау және құру қажет.
                  </li>
                </p>
                <p>
                  Өнеркәсіптік роботтар үшін бағдарламалау әдісін таңдау олардың брендіне
                  байланысты. Көптеген адамдар C++ немесе Visual Basic қолданылады деп ойлайды.
                  Шындығында, ассамблея сияқты тілдер жиі қолданылады.
                </p>
                <p>
                  Қазіргі кезде бар бірнеше жүздеген программалау тілдері төменгі немесе жоғары
                  деңгейіне байланысты екі топқа бөлінеді. 50-жылдардың басында машиналық код
                  төменгі деңгейлі тілдермен ауыстырылды. Олардың көмегімен бағдарламалау оңайырақ
                  болды. Олар әлі де қолданылады және роботтың әрекеттерін қатаң бақылау қажет
                  болған жағдайда әсіресе пайдалы. Бұл тілдердің маңызды кемшілігі бар: әртүрлі
                  дизайндағы машиналардың бірдей әрекеттері бөлек бағдарламаларды жазуды талап
                  етеді. Яғни, роботты экскаваторды ұстау үшін бір бағдарлама қажет, ал роботты қол
                  үшін – басқа.
                </p>
                <p>
                  Жоғары деңгейлі тілдермен жұмыс істегенде бұл мәселе болмайды. Олар әлдеқайда
                  дамыған және пайдалану оңай. Бұл жағдайда дизайнның нюанстары маңызды емес: кез
                  келген робот бірдей команданы орындайды. Бірақ мұндай тілдерде бағдарламаны тек
                  жады үлкен құрылғыға жазуға болады, өйткені ол көп орын алады.
                </p>
                <p>
                  Басқару аудармашы арқылы берілсе, роботты бағдарламалау төменгі деңгейлі тілде
                  жасалуы керек. Егер микроконтроллерде Arduino типті тақша болса, сіз жоғары
                  деңгейлі тілдерді пайдалана аласыз, олармен жұмыс істеу оңайырақ. Басқарудың
                  бірнеше түрі бар роботты бағдарламалау кезінде әртүрлі тапсырмалар үшін әртүрлі
                  тілдер жиі пайдаланылады. Мұндай машинаны полиглот деп санауға болады.
                </p>
                <p>Төменде робототехниктер қолданатын ең танымал тілдердің таңдауы берілген.</p>
                <p>
                  Бағдарламалау тілдерін егжей-тегжейлі оқу үшін сізге көп әдебиеттерді оқу керек.
                  Мұнда жалпы түсінік беру және оның көшбасшылар тақтасында неліктен болғанын
                  түсіндіру үшін әрқайсысының негізгі ерекшеліктері ғана берілген. Әрбір тіл үшін
                  онда жазылған бір бағдарламаның мысалы келтірілген. Негізгі оқыту әдетте осы
                  бағдарламадан басталады. Оның нәтижесі - мониторда немесе контроллер экранында
                  Hello, world жазуының пайда болуы.
                </p>
              </p>
            </>
          )}
          {add === 18 && (
            <>
              <h2 className="readRight__title">Ассамблер тілі</h2>
              <p>
                Бұл төмен деңгейлі тіл. Бұл машиналық кодқа өте жақын. Arduino сияқты
                микроконтроллерлер пайда болғаннан бері бұл тіл азырақ пайдаланылады, өйткені
                роботтарды енді басқа деңгейде басқаруға болады. Микроконтроллерлер C/C++ және басқа
                тілдерде басқаруды қолдайды. Бірақ «Ассемблер» әлі де қажет. Ол роботтың әрекеттерін
                толық бақылау қажет болған жағдайда қолданылады. Кейбір шарттарды құрылғыға тек осы
                тілде орнатуға болады.
              </p>
            </>
          )}
          {add === 19 && (
            <>
              <h2 className="readRight__title">Java</h2>
              <p>
                Идея Java виртуалды машинасы әртүрлі роботтарда бірдей кодты пайдалануға мүмкіндік
                береді. Бірақ бұл идея әрқашан жұмыс істемейді және кейде кодты механизмге
                жеткізетін бағдарламаның орындалуын баяулатады. Виртуалды машина алдымен берілген
                роботта жұмыс істейтін белгілі бір бағдарламаның «бейнесін» жасауы керек. Бұл өте
                көп уақытты алады. Веб-технологияларға қатысты роботтар осы тілде бағдарламаланған.
                Мысалдар: бейне түсіретін және оны Интернетке тарататын құрылғы, сондай-ақ ұқсас
                принципті JavaScript қолданатын «ақылды үй» жүйесін көрсетуге болады;
              </p>
            </>
          )}
          {add === 20 && (
            <>
              <h2 className="readRight__title">MATLAB</h2>
              <p>
                Робототехника инженерлері арасында танымалдыққа ие болған жоғары деңгейлі тіл.
                MATLAB және оның ортасынан басқа, Октава сияқты ашық бастапқы аудармашылары бар туыс
                тілдер бар.
                <p>
                  Бұл тіл үлкен көлемдегі ақпаратты өңдейтін және нақты нәтиже беретін
                  бағдарламаларды жазуға мүмкіндік береді. Сондықтан MATLAB әсіресе компьютерлік
                  көруді дамыту үшін қолайлы.
                </p>
              </p>
            </>
          )}
          {add === 21 && (
            <>
              <h2 className="readRight__title">Python</h2>
              <p>
                Бұл жоғары деңгейлі тіл қолданудың қарапайымдылығы үшін бағаланады. Ол сонымен қатар
                айнымалы типтерді анықтау және шығару сияқты операциялар кезінде уақытты үнемдейді.
                Қазірдің өзінде жазылған көптеген дайын бағдарламаларды орындау кодтары (скрипттері)
                бар. Оларды
              </p>
            </>
          )}
          {add === 22 && (
            <>
              <h2 className="readRight__title">
                Arduino платформасы туралы жалпы ақпарат. Ақпараттық бөлік. Arduino тақталары
              </h2>
              <p>
                Arduino дегеніміз не?
                <p>
                  Arduino деген не екенін қысқаша түсіндіру үшін оны бағдарламалық құрал деп айтсақ
                  қателеспейміз. Массимо Банзи және оның командасы алғаш рет 2005 жылы жасаған
                  Arduino ашық бастапқы коды бар аппараттық және бағдарламалық платформа болып
                  табылады. Негізгі мақсаты электронды жобаларды жобалау мен жүзеге асыруды
                  жеңілдету болып табылатын Arduino микроконтроллер негізіндегі платформа ретінде
                  ерекшеленеді. Ондағы микроконтроллер чипі әртүрлі кіріс және шығыс түйреуіштер
                  арқылы сенсорларды, қозғалтқыштарды, дисплейлерді және басқа электрондық
                  компоненттерді басқаруға мүмкіндік береді. Arduino әзірлеушілерге, студенттерге
                  және электроника әуесқойларына жүгіне алады, өйткені оның үйренуге оңай
                  бағдарламалау тілі бар. Мұның бәрінен басқа, Arduino ашық бастапқы коды
                  пайдаланушыларға өз жобаларын жасауға және құрылғыларын теңшеуге мүмкіндік береді.
                  Arduino негізіндегі жобаларды автоматтандыру жүйелерінен роботтарға, интерактивті
                  өнер қондырғыларына дейін көптеген салаларда қолдануға болады. Үлкен қауымдастық
                  қолдаған Arduino қазір студенттерден кәсіпқойларға дейін барлық деңгейдегі
                  пайдаланушылардың шығармашылығын ашатын құралға айналды.
                </p>
                <p>
                  Arduino өнеркәсіп, денсаулық сақтау, қорғаныс, зертхана, ақылды үйлер үшін
                  қолданылады. Бірақ Arduino пайдалануды шектеу дұрыс болмас еді. Сіз Arduino
                  тақталарын ойыңызға келетін және жобаларыңызды өмірге әкелетін кез келген нәрсе
                  үшін пайдалана аласыз.
                </p>
                <p>
                  <i>Өнеркәсіп</i>
                </p>
                <p>
                  Arduino басқа құрылғылар мен жабдықты басқару үшін өнеркәсіптік өндіріс
                  процестерінің бөлігі ретінде пайдаланылуы мүмкін. Arduino машиналарды дәл басқару,
                  өнеркәсіптік жабдықты басқару үшін кодты қайталап орындау немесе CNC машинасын
                  басқару үшін өте пайдалы болуы мүмкін. Соңғы бірнеше жылда Wi-Fi және бұлттық
                  қызметтер сияқты сымсыз технологиялардың өсуімен сымсыз жүйелер күнделікті
                  өмірімізде монотонды болды. Arduino тақталары бұрынғы шағын өнеркәсіптік жүйелерге
                  қашықтан басқару және бақылау функцияларын қосу үшін қарапайым өнеркәсіптік
                  құрылғыларға арзан және икемді балама болып табылады.
                </p>
                <p>
                  <i>Денсаулық</i>
                </p>
                <p>
                  Arduino негізіндегі жүрек соғу жиілігінің мониторы бір минуттағы жүрек соғысының
                  санын есептейді. Оған саусағыңызды сенсорға қойған кезде жүрек соғуын анықтайтын
                  жүрек соғуының сенсоры модулі бекітілген. Arduino көптеген медициналық жабдықты
                  жобалау үшін пайдаланылады, мысалы, теңшелетін алкотестер, шағын автоматты аяқ
                  массажері, термометр, arduino тақтасы бар WI-Fi дене шкаласы.
                </p>
                <p>
                  <i>Қорғау</i>
                </p>
                <p>
                  RADAR (Radio Detection and Ranging) — объектілердің ауқымын, биіктігін, бағытын
                  немесе жылдамдығын біле алатын радиотолқындарға негізделген нысанды анықтау
                  жүйесі. Радар әртүрлі өлшемдерге және әртүрлі өнімділік сипаттамаларына ие болуы
                  мүмкін. Оны әуежайларда әуе қозғалысын басқару, алыс қашықтықтан бақылау және
                  кемелердегі ерте хабарлау жүйелері үшін пайдалануға болады. Бұл жүйе зымырандарды
                  бағыттау жүйесінің жүрегі болып табылады. Ұрыста бірнеше шағын портативті
                  радиолокациялық жүйелер, сондай-ақ бірнеше үлкен бөлмелерді алып жатқан жүйелер
                  қызмет етеді және басқарылады.
                </p>
                <p>
                  <i>Зертханалар</i>
                </p>
                <p>
                  Arduino зертханада схемаларды жобалау және оқу үшін пайдалы платформаны ұсынады.
                  Жаңадан бастағандар тарапынан бүліну немесе қате болуы мүмкін, сонымен қатар жаңа
                  электронды бөлшектерді пайдалану студенттер үшін қымбат болуы мүмкін. Бұл arduino
                  симуляторы осы мәселелердің шешімін қамтамасыз етеді, сіздің құрамдас бөліктерге
                  зақым келтірмейді, аппараттық құралдарға ақша жұмсамайды, схеманы тезірек
                  прототиптеу және кабельді шатастырмайды. Arduino негізіндегі автоматты
                  слайд-қозғалыс микроскопы - өте үнемді зертханалық құрылғы.
                </p>
                <p>
                  <i>Ақылды үйлер</i>
                </p>
                <p>
                  Arduino карталарымен біз үйдегі әрекеттерді қозғалыс сенсорлары, шығыс бақылауы,
                  температура сенсорлары, үрлегіштерді басқару, гараж есігін басқару, ауа ағынын
                  басқару және материалдар шоты сияқты басқару жүйелерімен басқара аламыз. Белгілі
                  болғандай, Arduino түрлерін пайдалану арқылы кез келген жобаны жасауға болады.{' '}
                </p>
                <p>Arduino-ның бірнеше түрлері бар:</p>
              </p>
            </>
          )}
          {add === 23 && (
            <>
              <h2 className="readRight__title">Arduino Mega дегеніміз не?</h2>
              <p>
                Arduino Mega - бұл Arduino отбасының қуатты мүшесі ретінде үлкен жобаларды
                басқарғысы келетін әзірлеушілер таңдаған микроконтроллер тақтасы.
                <p style={{ textAlign: 'center' }}>
                  <img src="/img/img34.png" />
                  <li>10.1- сурет. Arduino Mega тақтасы</li>
                </p>
                <li>Міне, Arduino Mega мәліметтері мен қуатты мүмкіндіктері:</li>
                <li>
                  1. Микроконтроллер және жад сыйымдылығы Arduinobr <br /> Mega-да ATmega2560
                  микроконтроллері бар. Бұл үлкен жобаларда бірнеше сенсорлар мен құрылғыларды
                  басқару мүмкіндігін береді. Бұған қоса, ол 256 Кбайт флэш жады және 8 Кбайт SRAM
                  бар үлкен бағдарламалау және сақтау кеңістігін ұсынады.
                </li>
                <li>
                  2. Кіріс/шығыс түйреуіштері
                  <br /> Arduino Mega барлығы 54 сандық кіріс/шығыс түйреуіштерімен жабдықталған.
                  Бұл түйреуіштер сенсорларды, дисплейлерді және басқа құрылғыларды басқаруға кең
                  икемділік береді. Сондай-ақ оның 16 аналогтық кірісі бар. Бұл мүмкіндік аналогтық
                  сенсорларды пайдалануды жеңілдетеді.
                </li>
                <li>
                  3. Кең қосылым опциялары
                  <br /> Arduino Mega жүйесіндегі USB қосылымы оңай бағдарламалауға және
                  компьютермен байланысуға мүмкіндік береді. Сондай-ақ оның I2C, SPI және UART
                  сияқты танымал байланыс протоколдарын қолдайтын пин топтары бар; Бұл әртүрлі
                  құрылғылармен үздіксіз интеграцияны білдіреді.
                </li>
                <li>
                  4. Сыртқы қуат көзі
                  <br />
                  Arduino Mega сіздің жобаңыздың қуат қажеттіліктерін қанағаттандыру үшін сыртқы
                  қуат көзіне қосылымға ие. Бұл мүмкіндік жобаларыңызды қуаттырақ және энергияны көп
                  қажет ететін қолданбаларға қолайлы етеді.
                </li>
                <li>
                  5. Кең қауымдық қолдау және кітапханалар
                  <br />
                  Кең пайдаланушылар қауымдастығы мен кітапханалық қолдауы бар Arduino Mega
                  жобаларыңызды дамыту және мәселелерді шешу үшін әртүрлі ресурстардан пайда алуға
                  мүмкіндік береді.
                </li>
              </p>
            </>
          )}
          {add === 24 && (
            <>
              <h2 className="readRight__title">Arduino Nano дегеніміз не?</h2>
              <p>
                Arduino Nano - шағын өлшемдерімен және қуатты өнімділігімен ерекшеленетін
                микроконтроллер тақтасы. Портативті жобалардан ендірілген жүйелік дизайнға дейінгі
                қосымшалардың кең ауқымын қарастыратын Nano Arduino отбасының көрнекті мүшелерінің
                бірі болып табылады.
                <p style={{ textAlign: 'center' }}>
                  <img src="/img/img35.png" />
                  <li>10.2- сурет. Arduino Mega тақтасы</li>
                </p>
                <li>Міне, Arduino Nano мәліметтері мен мүмкіндіктері:</li>
                <li>
                  1. Шағын дизайн
                  <br />
                  Arduino Nano 45 мм x 18 мм сияқты өте кішкентай өлшемдерде жасалған. Бұл
                  жобаңыздағы шектеулі кеңістікте пайдалануды жеңілдетеді және оны әсіресе
                  портативті құрылғылар үшін тамаша таңдау етеді.
                </li>
                <li>
                  2. ATmega328 микроконтроллері
                  <br />
                  Nano-да Arduino Uno сияқты микроконтроллер ATmega328 бар. Бұл Arduino Nano-ға кең
                  ауқымды Arduino қауымдастығы мен кітапхана қолдауынан пайда алуға мүмкіндік
                  береді.
                </li>
                <li>
                  3. USB қосылымы
                  <br />
                  Arduino Nano біріктірілген USB интерфейсіне ие; Бұл оны компьютерге оңай қосуға
                  мүмкіндік береді. Бұл USB арқылы бағдарламалау және сериялық байланыс үшін тамаша
                  шешім.
                </li>
                <li>
                  4. Кең кіріс/шығыс түйреуіштері
                  <br />
                  Көлеміне қарамастан, Nano 22 сандық кіріс/шығыс түйреуіштерімен жабдықталған.
                  Сондай-ақ оның 8 аналогтық кіріс түйреуіштері бар. Осылайша, ол әртүрлі сенсорлар
                  мен құрылғыларды қосу мүмкіндігін ұсынады.
                </li>
                <li>
                  5. Сыртқы қуат көзі
                  <br />
                  Arduino Nano сыртқы қуат көзінен қуат алады. Бұл мүмкіндік жобаларды батареялар
                  немесе сыртқы адаптер арқылы қуаттандыруға мүмкіндік береді.
                </li>
                <li>
                  6. Интегралды схемалар (ICs) <br />
                  Nano-да біріктірілген бірнеше IC бар. Бұл интегралды схемалар тақтаны кішірейтуге
                  және жобалардағы күрделілікті азайтуға көмектеседі. Енді Arduino Nano деген не
                  деген сұраққа жауап бергеннен кейін, Pro Mini келесіде. Толық ақпарат алу үшін
                  оқуды жалғастырыңыз.
                </li>
              </p>
            </>
          )}
          {add === 25 && (
            <>
              <h2 className="readRight__title">Arduino Pro Mini дегеніміз не?</h2>
              <p>
                Arduino Pro Mini - бұл кірістірілген жүйе конструкциялары мен энергия тиімділігін
                қажет ететін жобалар үшін арнайы әзірленген микроконтроллер тақтасы.
                <p style={{ textAlign: 'center' }}>
                  <img src="/img/img36.png" />
                  <li>10.3- сурет. Arduino Mega тақтасы</li>
                </p>
                <p>
                  Ықшам өлшемдерімен, төмен қуат тұтынуымен және қуатты өнімділігімен назар
                  аударатын Arduino Pro Mini көптеген әзірлеушілер үшін тамаша нұсқа ретінде
                  ерекшеленеді. Міне, Arduino Pro Mini мәліметтері мен мүмкіндіктері:
                </p>
                <p>
                  1. Шағын дизайн
                  <br />
                  Arduino Pro Mini әдетте 18 мм x 33 мм өлшемде келеді. Сондықтан сіз оны жобаның
                  шектеулі аймақтарында оңай пайдалана аласыз және ендірілген жүйелік қолданбалар
                  үшін оңай таңдай аласыз.
                </p>
                <p>
                  2. ATmega328 микроконтроллері
                  <br />
                  Pro Mini-де Arduino Uno және Nano сияқты ATmega328 микроконтроллері бар. Бұл
                  Arduino Pro Mini-ге кең ауқымды Arduino қауымдастығы мен кітапхана қолдауынан
                  пайда алуға мүмкіндік береді.
                </p>
                <p>
                  3. Сыртқы қуат көзі
                  <br />
                  Arduino Pro Mini сыртқы қуат көзінен қуат алады. Төмен қуатты тұтыну батареяға
                  негізделген жобалар мен портативті құрылғылар үшін жарамды.
                </p>
                <p>
                  4. Бағдарламалау интерфейсі
                  <br />
                  Pro Mini FTDI немесе USB-сериялық адаптерлер арқылы бағдарламалануы мүмкін. Осы
                  адаптерлердің арқасында оны Arduino IDE арқылы оңай бағдарламалауға болады.
                </p>
                <p>
                  5. Төмен қуат тұтыну
                  <br />
                  Arduino Pro Mini қуатты аз тұтынуымен танымал. Бұл мүмкіндік батареялармен немесе
                  төмен қуат көздерімен жұмыс істейтін жобаларда энергия тиімділігін қамтамасыз
                  етеді.
                </p>
                <p>
                  6. Кең кіріс/шығыс түйреуіштері
                  <br />
                  Көлеміне қарамастан, Pro Mini 14 сандық кіріс/шығыс істіктерімен және 8 аналогтық
                  кіріс істіктерімен жабдықталған. Бұл әртүрлі сенсорлар мен құрылғыларды қосу
                  мүмкіндігін ұсынады.
                </p>
              </p>
            </>
          )}
          {add === 26 && (
            <>
              <h2 className="readRight__title">Arduino Леонардо дегеніміз не?</h2>
              <p>
                Arduino Леонардо - Arduino отбасының мүшесі ретінде тамаша микроконтроллер тақтасы.
                Пернетақта мен тінтуірдің эмуляциясы сияқты қолданбаларда пайдалану үшін арнайы
                жасалған Леонардо өзінің жетілдірілген мүмкіндіктерімен және икемділігімен
                ерекшеленеді. Міне, Arduino Leonardo ерекшеліктері: 1. Atmega32u4 микроконтроллері
                <br />
                Arduino Leonardo-да ATmega32u4 микроконтроллері бар. Бұл Леонардоны басқа Arduino
                тақталарынан ерекшелендіретін мүмкіндіктердің бірі. USB арқылы компьютермен
                байланысу мүмкіндігі пернетақта мен тінтуірдің эмуляциясына мүмкіндік береді. 2. USB
                қосылымы және HID протоколын қолдау
                <br />
                Леонардода біріктірілген USB интерфейсі бар және USB HID (Адам интерфейсі құрылғысы)
                протоколын қолдайды. Бұл Arduino Leonardo-ға пернетақта, тінтуір немесе басқа HID
                құрылғылары ретінде әрекет етуге мүмкіндік береді. Бұл мүмкіндік сонымен қатар
                арнайы пайдалану және интерактивті жобалар үшін үлкен артықшылықты білдіреді. 3.
                Біріктірілген пернетақта мен тінтуір эмуляциясы
                <br />
                Леонардо компьютерін Arduino IDE арқылы бағдарламалау арқылы пернетақта немесе
                тінтуір ретінде басқара алады. Бұл реттелетін басқару жүйелерін немесе интерактивті
                қондырғыларды дамытқысы келетіндер үшін әсіресе күшті әсер етеді. 4. Үлкен
                енгізу/шығару түйреуіштері
                <br />
                Леонардо 20 сандық кіріс/шығыс түйреуіштерімен және 12 аналогтық кіріс істіктерімен
                жабдықталған. Бұл әртүрлі сенсорлар мен құрылғыларды қосу үшін кең икемділікті
                қамтамасыз етеді. 5. Біріктірілген сериялық байланыс және SPI қолдауы
                <br />
                Леонардо сериялық байланыс протоколдарын қолдайды және SPI қосылымдарына мүмкіндік
                береді. Бұл әртүрлі құрылғылармен және модульдермен біріктірудің кең мүмкіндіктерін
                ұсынады.
              </p>
            </>
          )}
          {add === 27 && (
            <>
              <h2 className="readRight__title">
                Arduino платасының негізгі компоненттері мен бөлшектері.
              </h2>
              <p>
                <p>
                  Arduino - бұл қоршаған ортамен оңай әрекеттесе алатын жүйелерді жобалауға болатын
                  ашық бастапқы әзірлеу платформасы. Сондықтан пайдаланушы өз қалауы бойынша
                  өңдеулер жасай алады. Arduino кітапханаларының арқасында оны оңай бағдарламалауға
                  болады. Аналогтық және сандық кірістердің арқасында аналогтық және цифрлық
                  деректерді өңдеуге болады. Ол сенсорлармен жұмыс істей алатындықтан, сенсорлардан
                  алынған деректерді пайдалануға болады. Сыртқы әлемге (дыбыс, жарық, қозғалыс,
                  мәтін, суреттер және т.б.) шығыстарды шығаруға болады. Робототехника мен
                  электронды қосымшаларды карта арқылы оңай жүзеге асыруға болады. Arduino-да
                  қолданылатын бағдарламалау тілі қарапайым болғандықтан, көптеген ресурстарды
                  табуға болады. Бағдарламалық құралды тегін жүктеп алуға болады және ол Mac OS X,
                  Windows және Linux жүйелерін қолдайтындықтан, қолданбаларды операциялық жүйемен
                  үйлесімділік мәселесінсіз әзірлеуге болады.
                </p>
                <p>
                  Бағдарламалар бастапқы кодтың мыңдаған жолдарынан тұрады. Бағдарламалау тілін
                  білмейтіндер үшін тым күрделі болып көрінетін бұл кодтар қолданбалы файл ретінде
                  құрастырылған. Компиляция процесінен кейін бастапқы кодтардың қажеті жоқ.
                  Сондықтан, iTunes сияқты бағдарламалық құралды іске қосқан кезде сіз бастапқы
                  кодты көрмейсіз, тек өнімнің соңғы нұсқасын көресіз. Біздің көпшілігіміз үшін бұл
                  дәл солай болуы керек. Ашық бастапқы бағдарламалық қамтамасыз ету бастапқы
                  кодтарымен бірге жарияланады. Әзірлеуші кейде оларды құрастырып, бастапқы кодымен
                  бірге іске асыру файлын бере алады. Кейбір жағдайларда компиляция қолданушыға
                  қалдырылады. Ашық бастапқы бағдарламалық құрал – бастапқы кодтары жалпыға
                  қолжетімді бағдарламалық құрал. Бұл кез келген өзгертулер енгізу арқылы өз
                  нұсқаңызды жасауға болатынын білдіреді. Arduino ide кез келген жерден жүктеп
                  алынатын және онлайн кодтау нұсқаларымен кодтау мүмкіндігін ұсынады. Arduino IDE –
                  пайдалану оңай және бағдарламалауды жылдам бастауға мүмкіндік беретін ашық
                  бастапқы бағдарлама Arduino Uno қалай бағдарламалау керек деген сұраққа жауап
                  ретінде C/C++ тілдерін білу қажет деп айта аламыз. Дегенмен, әрине, бұларды
                  білмей-ақ блокқа негізделген бағдарламалау әдісін пайдаланып Arduino-ны
                  бағдарламалауға болады.
                </p>{' '}
                <br />
                <p style={{ textAlign: 'center' }}>
                  <img src="/img/img37.png" />
                  <li>Сурет- 11.1. Arduino Uno тақташасы</li>
                </p>
                Сурет- 11.1. Arduino Uno тақташасы Arduino uno r3 - SMD 340 чипіне негізделген
                микроконтроллер картасы. Оның 14 сандық кіріс/шығыс түйреуіштері (оның 6-ы PWM
                шығысы ретінде пайдалануға болады), 6 аналогтық кіріс, 16 МГц кристалдық осциллятор,
                USB қосылымы, қуат ұясы, ICSP тақырыбы және қалпына келтіру түймесі бар. Ол
                микроконтроллерді қолдау үшін қажеттінің барлығын қамтиды; Жұмысты бастау үшін оны
                компьютерге USB кабелі арқылы қосыңыз немесе оны AC-DC адаптерімен немесе батареямен
                қуаттандырыңыз және бәрі аяқталды. Arduino Uno-ның басқа нұсқаларынан айырмашылығы,
                Arduino Uno R3-тің жаңа редакциялау мүмкіндіктері келесідей: <br />
                1.0 түйреуіш: AREF істікшесіне жақын орналасқан SDA және SCL істіктері және картаны
                панельден берілетін кернеуге бейімдеуге мүмкіндік беретін RESET істікшесі, IOREF
                жанында орналасқан екі жаңа түйреуіш. Болашақта жаңа Arduino әзірлеу тақталары 5 В
                кернеуінде жұмыс істейтін AVR және 3,3 В кернеуінде жұмыс істейтін Arduino Due
                екеуімен үйлесімді болады. «Uno» итальян тілінде бір дегенді білдіреді және Arduino
                1.0-нің алдағы нұсқасына сілтеме жасау үшін аталған. Uno және v1.0 Arduino-ның алға
                жылжуының анықтамалық нұсқалары болады. Arduino UNO тақтасында USB порты бар, ол
                тақтаны компьютерге қосуға мүмкіндік береді. Осы USB кірісі арқылы Arduino UNO-мен
                байланыс орнатылады. <br />
                <p>Күш</p>
                <p>
                  Arduino тақтасының жұмысына қажетті қуат USB желісі арқылы немесе сыртқы қуат
                  көзінен қамтамасыз етілуі мүмкін. Arduino тақтасын шығысы 7 вольт пен 12 вольт
                  арасындағы адаптерді сыртқы қуат кірісіне қосу арқылы пайдалану ұсынылады. Arduino
                  UNO картасының сыртқы қуат кірісіне арналған жоғарғы және төменгі кернеу мәндері 6
                  вольт және 20 вольт.
                </p>
                <br />
                <p>
                  Картада «қалпына келтіру» түймесі бар. Бұл түйме басылғанда Arduino UNO
                  бағдарламасындағы бағдарлама басынан басталады.
                </p>
                <br />
                <p>
                  Arduino UNO тақтасындағы түйреуіштер
                  <br />
                  Arduino UNO жүйесінде 14 сандық түйреуіш және 6 аналогтық түйреуіш, яғни қосылу
                  нүктелері бар.
                </p>
                <p>
                  Сандық түйреуіштер Сандық түйреуіштерді кіріс және шығыс ретінде пайдалануға
                  болады. Басқаша айтқанда, осы түйреуіштерді пайдалана отырып, сенсорлардан
                  деректерді оқу сияқты енгізу әрекеттерін де, жарық диодтары сияқты шығыс
                  операцияларын да орындауға болады. Түтіктер 0 мен 13 аралығында нөмірленеді. Әрбір
                  түйреуіш 5 вольтпен жұмыс істейді және максималды 40 миллиампер ток тарта алады. 0
                  және 1 түйреуіштер RX (яғни деректер қабылдағыш) және TX (яғни, деректер эмитент)
                  істіктері болып табылады. Бұл түйреуіштер компьютерге қосылу және бағдарламаны
                  жүктеу кезінде қолданылады.
                </p>
                <br />
                <p>
                  3, 5, 6, 9, 10 және 11 түйреуіштер PWM түйреуіштері болып табылады. PWM
                  түйреуіштерінің жанында тильда белгісі (~) бар. PWM мүмкіндігі көбінесе сандық
                  аналогты түрлендіру процестерінде қолданылады. Мұның мысалдары қозғалтқыштың
                  жылдамдығын басқаруды және жарық диоды жарықтығын реттеуді қамтиды. PWM
                  түйреуіштеріне 0 мен 255 аралығындағы мәндер берілуі мүмкін.
                </p>
                <p>
                  Аналогтық түйреуіштер
                  <br />
                  Arduino UNO-да A0-ден A5-ке дейінгі 6 аналогтық кіріс бар. Бұл түйреуіштер
                  аналогтық тізбек элементтерінің мәндерін оқу үшін қолданылады. 0 мен 1023
                  арасындағы мәндерді осы кірістермен оқуға болады.
                </p>
                <br />
                <p>
                  Қуат түйреуіштері
                  <br />
                  Vin: Бұл түйреуіш сыртқы қуат кірісі болып табылады. Адаптердің ұясы бекітілген
                  сыртқы қуат кірісімен бір жолда. Сондықтан түйреуішке 7 вольт пен 12 вольт
                  арасындағы кернеу қолданылуы керек.
                </p>
                <br />
                <p>
                  5V: Біз бұл түйреуіш арқылы 5 вольт шығысын ала аламыз. Осылайша, біз 5 вольтпен
                  жұмыс істейтін сенсорларды осы түйреуішке қосу арқылы энергия кірісін қамтамасыз
                  ете аламыз.
                </p>
                <br />
                <p>
                  3,3 В: Бұл түйреуіш Arduino-дағы реттегіштің арқасында тізбектегі 3,3 вольтпен
                  жұмыс істейтін компоненттер үшін пайдалануға болатын кернеуді беру түйреуіш болып
                  табылады. Бұл түйреуіштің максималды шығыс тогы 50 миллиампер.
                </p>
                <br />
                <p>GND: GND істікшесі - бұл тізбекті аяқтау үшін қажет жерге қосу.</p>
                <br />
                <p>
                  Жарықдиодты шамдар
                  <br />
                  Тақтада 4 кіріктірілген жарықдиодты шамдар бар.
                </p>
                <br />
                <p>
                  Жарық диоды қосулы: карта қуат алып жатқанын және картаның жұмыс істеп тұрғанын
                  көрсетеді.
                </p>
                <br />
                <p>
                  RX және TX жарық диодтары: Бұл байланыс диодтары. Деректер алмасу кезінде олар
                  жыпылықтайды.
                </p>
                <br />
                <p>
                  L LED: бұл әдетте картаны басқару үшін пайдаланылатын жарық диоды. Бұл жарық диоды
                  цифрлық істікшелі 13-ке қосылған.
                </p>
                <br />
                <p>
                  Қалпына келтіру түймесі қалпына келтіру түймешігіне қосылған. Осы түйреуішке 5
                  вольт ток бергенде, Arduino тақтасы қалпына келтіру түймесі басылғандай қалпына
                  келтіріледі.
                </p>
                <br />
              </p>
            </>
          )}
          {add === 28 && (
            <>
              <h2 className="readRight__title">11.2. Arduino бөліктері</h2>
              <p>
                <p>
                  Arduino кабелі
                  <br />
                  Бұл Arduino-ны компьютерге қосатын кабель. Бұл кабель арқылы компьютерге қосылу
                  және қосылу арқылы Arduino бағдарламалауға мүмкіндік береді. Ол сондай-ақ энергия
                  береді. Кабель Arduino тақтасына байланысты әр түрлі болуы мүмкін.
                </p>
                <p>
                  <img src="/img/img38.png" />
                </p>
                Нан тақтасы (Breadboard) <br />
                Бұл Arduino бөліктері арасындағы маңызды бөліктердің бірі. Мұның себебі, ол Arduino
                бөліктерін нан тақтасындағы тесіктер арқылы сынауға мүмкіндік береді. Бұған қоса, ол
                бөлікті бірнеше рет сынау мүмкіндігін ұсынады. Нан тақталары әртүрлі өлшемдер мен
                түстерде келеді.
                <p>
                  <img src="/img/img39.png" />
                </p>
                Өткізгіш кабельдер Бұл нан тақтасындағы және Arduino табанындағы тесіктерге сәйкес
                келетін кабельдер. Бұл кабельдер Arduino бөліктері арасындағы байланыс пен қуат
                көзін қамтамасыз етеді. Секіргіш кабельдер үш түрден тұрады. Бұл еркек-ер,
                еркек-әйел, әйел-әйел. Сіз осы сорттардың ішінен өз қажеттіліктеріңізге сәйкес
                келетінін таңдай аласыз.
                <p>
                  <img src="/img/img40.png" />
                </p>
                Жарық диодты индикатор
                <br />
                Жарық диодты жарық диодты білдіреді және екі аяқтан тұрады. бұл плюс (+) және минус
                (-) аяқтары. Бұл аяқтардың қысқа аяғы минус (-) және ұзын аяғы плюс (+).
                Жарықдиодтардың түстері тек көрнекі түрде ғана емес. Жарық диодты шамдар түстеріне
                сәйкес кернеу мәндеріне ие. Мысалы, қызыл жарық диоды 2 вольтпен жұмыс істесе, көк
                жарық диоды 3,3 вольтпен жұмыс істейді. Осы себепті, жарықдиодты шамдар әдетте
                резисторлар арқылы тізбекке қосылады.
                <p>
                  <img src="/img/img41.png" />
                </p>
                Резисторлар
                <br />
                Кедергі деп өткізгіш арқылы өтетін электр тогының кернеуін айтады және оның өлшем
                бірлігі Ом. Резисторлардың қызметі өткізгіш арқылы өтетін токты белгілі бір мәнде
                ұстап тұру болып табылады. Резисторлардың көптеген мәндері мен түрлері бар.
                Резисторлардың ом мәндері олардағы сызықтардан есептеледі.
                <p>
                  <img src="/img/img42.png" />
                </p>
                Потенциометр
                <br />
                Потенциометрлер - тізбектегі токты азайту, арттыру немесе шектеу үшін қолданылатын
                тізбек элементтері. Arduino бөліктерінің арасында маңызды орынға ие потенциометрлер
                сызықтық жүгірткі арқылы қарсылық мәнін өзгерту немесе реттеу мүмкіндігін ұсынады.
                Мысалы, потенциометрлердің көмегімен шамның жарық қарқындылығын азайтуға немесе
                арттыруға болады. Потенциометрді Arduino бөліктеріне қосқанда Ом мәніне назар аудару
                керек.
                <p>
                  <img src="/img/img43.png" />
                </p>
                Түйме
                <br />
                Түймешіктер - оларға қысым жасау арқылы тізбекті немесе беруді орындайтын Arduino
                бөліктері. Бұл бөліктер басылған кезде әрекетті орындайды немесе тоқтатады.
                <p>
                  <img src="/img/img44.png" />
                </p>
                Дабыл
                <br />
                Дыбыстық сигнал – 2-5 вольт аралығында жұмыс істейтін және механикалық дыбыс
                (ескерту дыбысы) шығаратын құрылғы. Сиқырлы сигналдар әдетте сигнал береді және
                Arduino арқасында дыбыстық сигналдың ұзақтығын орнатуға болады.
                <p>
                  <img src="/img/img45.png" />
                </p>
                LCD дисплей
                <br />
                СКД экрандар мәтін және сағат сияқты таңбаларды көрсететін экран түрі болып
                табылады. LCD — сұйық кристалды дисплейдің аббревиатурасы. Arduino-да жиі
                қолданылатын бұл экран түрлері қолжетімді және бағдарламалау өте қарапайым. Бұл
                экрандардың мөлшері мен түсі бойынша әртүрлілігі айтарлықтай жоғары.
                <p>
                  <img src="/img/img46.png" />
                </p>
                Сервомотор
                <br />
                Сервоқозғалтқыш - ішіндегі механизмнің арқасында бұрыштық-сызықты позицияны,
                жылдамдықты және үдетуді ешқандай қатесіз басқаратын қозғалтқыш түрі.
                Сервоқозғалтқыштар әдетте 0-180 градус аралығында айналады, бірақ арнайы мақсатта
                шығарылған қозғалтқыштарда бұл дәреже 360-қа дейін жетеді. Бұл қозғалтқыштар әдетте
                тұрақты және айнымалы ток болып бөлінеді. Бұл қозғалтқыштарды сатып алғанда
                ескеретін тағы бір нәрсе - олардың кг-дағы қуаты.
                <p>
                  <img src="/img/img47.png" />
                </p>
                Қадамдық қозғалтқыш
                <br />
                Қадамдық қозғалтқыш - қадам бойынша қозғалатын және электр энергиясын физикалық
                энергияға түрлендіретін қозғалтқыш түрі. Бұл қозғалтқыштар қадамдық қозғалыс
                принципі бойынша жұмыс істейді және командалар қадамдар түрінде ұсынылған. Қадамдық
                қозғалтқыштар 3D принтерлерден бастап CNC машиналарына дейін кең ауқымды қолдануға
                ие.
                <p>
                  <img src="/img/img48.png" />
                </p>
                Релелік карта
                <br />
                Релелік карталар - олар арқылы өтетін токпен жұмыс істей бастайтын және төмен мәнді
                токпен жоғары құнды қабылдағышты ауыстыратын Arduino бөліктері. Arduino релелік
                карталарына берілген командалар арқылы кез келген уақытта әртүрлі электронды
                бөлшектерді (шам, мотор және т.б.) басқаруға болады.
                <p>
                  <img src="/img/img49.png" />
                </p>
                RFID модулі
                <br />
                Rfid модульдері – радиожиілік арқылы объектілерді бірегей және автоматты түрде тану
                әдісіне берілген атау және әдетте байланысатын екі бөліктен тұрады. Оқырман әртүрлі
                радиотолқындарды жібереді және өзінің хабарламасын тегтегі хабарламамен салыстырады.
                Егер ол үйлесімді болса, ол қажетті сигналды береді.
                <p>
                  <img src="/img/img49.png" />
                </p>
                Джойстик модулі
                <br />
                Джойстик модулі - екі осьте орналастырылған потенциометрлерден өзара деректерді
                қабылдайтын Arduino бөлігі. Бұл модульдің арқасында х және у осьтерінде қозғалыстар
                жасалып, қозғалтқышты іске қосу, шамды жағу, мәліметтерді қабылдау сияқты
                операциялар орындалады.
                <p>
                  <img src="/img/img49.png" />
                </p>
                Ультрадыбыстық қашықтық сенсоры
                <br />
                Ультрадыбыстық қашықтық сенсоры - әртүрлі дыбыс толқындарын жіберу арқылы
                айналасындағы нысандар арасындағы қашықтықты өлшеуге көмектесетін сенсор. Бұл
                сенсорды жарғанаттар мен дельфиндер сияқты жануарлар шабыттандырады. Ақылды
                көліктерден пәтер шамдарына дейін көптеген қолдануы бар бұл сенсор 2-200 см
                аралығында ең тиімді жұмыс істейді.
                <p>
                  <img src="/img/img50.png" />
                </p>
                Температура және ылғалдылық сенсоры
                <br />
                Температура мен ылғалдылық сенсоры температура мен ылғалдылықты сандық түрде өлшеуге
                арналған сенсор болып табылады. Біздің өміріміздің көптеген салаларында қолданылатын
                бұл сенсор цифрлық шығысы бар сенсор болып табылады.
                <p>
                  <img src="/img/img51.png" />
                </p>
                Жеделдету және гиросенсор
                <br />
                Жеделдету және гиросенсор - бұл 3 осьті гиро және 3 осьтік бұрыштық акселерометрі
                бар 6 осьті IMU сенсорлық тақтасы. Бұл карта арқылы ол бекітілген жердің (ұшқышсыз,
                зымыран, ұшқышсыз ұшақ және т.б.) үдеуі бақыланады және гиро мәні салыстырылады. Ол
                3-5 вольт аралығында жұмыс істейді.
                <p>
                  <img src="/img/img52.png" />
                </p>
                Дыбыс сенсоры
                <br />
                Дыбыс сенсоры - сырттан келетін дыбыс толқындарын анықтаған кезде жұмыс істей
                бастайтын сенсор. Ол потенциометрдің арқасында сезімталдықты реттеуге мүмкіндік
                береді. Бұл сенсор оқиғаны бастау үшін өте қолайлы.
                <p>
                  <img src="/img/img53.png" />
                </p>
                Түтін сенсоры
                <br />
                Түтін сенсорында әртүрлі газ массивтері бар және оның жоғары сезімтал құрылымымен
                қауіпті газ мен түтінді сезу арқылы сигнал беретін бөлік болып табылады. . Оның
                сұйық газ, бутан, пропан, метан, алкоголь, сутегі және темекі сияқты заттарды
                анықтау мүмкіндігі бар.
                <p>
                  <img src="/img/img54.png" />
                </p>
                Су деңгейінің сенсоры Су деңгейінің сенсоры су деңгейін анықтайтын және жаңбырды
                анықтайтын потенциометр логикасы арқылы суға төзімділікті қамтамасыз ету арқылы
                өлшенеді. Бұл сенсордың көмегімен шалшық деңгейін оңай өлшеуге болады.
                <p>
                  <img src="/img/img55.png" />
                </p>
              </p>
            </>
          )}
          {add === 29 && (
            <>
              <h2 className="readRight__title">
                Arduino бағдарламасын жүктеу, орнату және оқып үйрену
              </h2>
              <p>
                Ең алдымен Arduino IDE бағдарламасын жүктеп, орнату жолдарын қарастырайық:
                Arduino-ның арнайы{' '}
                <a href=" https://www.arduino.cc/en/software">
                  {' '}
                  https://www.arduino.cc/en/software
                </a>{' '}
                сайтына кіріп, Download парақшасынан Arduino IDE-нің соңғы нұсқасын жүктеп алыңыз.
                <p style={{ textAlign: 'center' }}>
                  <img src="/img/img56.png" />
                  <li>12.1- сурет. Arduino IDE платформасы</li>
                </p>
                MAC және Linux операциялық жүйелі компьютерлер драйверлерді автоматты түрде
                орнатады. Windows ОЖ компьютерлерге қосқанда драйверді орнату қажет болуы мүмкін.
                Келесі суретте бағдарламаның аймақтары мен функционалдық түймелерінің мақсаты
                көрсетілген:
                <p style={{ textAlign: 'center' }}>
                  <img src="/img/img57.png" />
                  <li>12.2-сурет.</li>
                </p>
                <li>1. Құрастыру: Ол біз жазған бағдарламаны құрастырады және қателерді табады.</li>
                <li>2. Жүктеп салу: Біз жазған кодты құрастырады және оны Arduino-ға жібереді.</li>
                <li>3. Жаңа бет: жаңа жұмыс парағын ашады.</li>
                <li>4. Ашу: тіркелген бағдарламаны ашады.</li>
                <li>5. Сақтау: Біз жазған бағдарламаны сақтайды.</li>
                <li>6. Сериялық монитор: Arduino-мен сериялық байланысу арқылы экранды ашады.</li>
                <li>7. Скетч: Біз жазған программаның файл атауы.</li>
                <li>8. Бос орын: Біз жазатын бағдарлама аймағы.</li>
                <li>9. Индикатор: операцияның орындалу барысын көрсетеді.</li>
                <li>
                  10. Есеп: Ол компиляция нәтижесінде жіберілген қателерді немесе орнатудан кейін
                  микроконтроллердегі бағдарламамыздың алатын орнын көрсетеді.
                </li>
                <li>
                  11. Индикатор: ол USB арқылы компьютерге Arduino қосылған портты және біз қай
                  Arduino моделімен жұмыс істеп жатқанымызды көрсетеді.{' '}
                </li>
                Енді сіз эскизді (код) жазып, оны Arduino-ға жүктей аласыз (жүктеп салу/жарқылдау).
                Бірақ оған дейін Arduino тақтасын компьютерге қосып, Arduino IDE бағдарламасына қай
                Arduino тақтасын және қай портқа қосу қажеттігін білу керек.
                <p style={{ textAlign: 'center' }}>
                  <img src="/img/img58.png" />
                  <li>12.3- сурет.</li>
                </p>
                Енді Arduino тақтасы қосылған Com портын таңдау керек. Ол үшін келесі суретте
                көрсетілгендей Инструменты {'>'} Порт {'>'} Номер доступного порта», мәзір
                бөліміндегі қолжетімді Com порттар тізімінен қажетті Com портын таңдаңыз:
                <p style={{ textAlign: 'center' }}>
                  <img src="/img/img59.png" />
                  <li>12.4- сурет.</li>
                </p>
                Егер Arduino тақтасының USB контроллері FTDI немесе ұқсас чипте орындалса, қол
                жетімді Com порттарының тізімінде сіз Arduino тақтасының атауын Com портына
                қарама-қарсы жақшада көрмейсіз. Біздің жағдайда сіз жай ғана «COM1» және «COM7»
                көресіз, содан кейін сұрақ туындайды, Arduino тақтасы осы порттардың қайсысына
                қосылған?
                <br />
                Бұл мәселені өте қарапайым шешуге болады. Arduino тақтасын компьютерден ажыратып,
                Құралдар {'>'} Порт мәзірін ашыңыз. Com порттарының тізімінде сіз тек қолжетімді Com
                порттарын көресіз, яғни біздің жағдайда тек «COM1». Енді Arduino тақтасын
                компьютерге қосып, Құралдар {'>'} Порт мәзірін қайта ашыңыз. Енді сіз Com
                порттарының тізімі біреуге көбейгенін көресіз (біздің жағдайда «COM7» «COM1» ішіне
                қосылды) және дәл Arduino тақтасы қосылған Com портына көрінеді. <br />
                Arduino тақтасын қосу: <br />
                Arduino тақтасын USB порты арқылы компьютерге қосқаннан кейін Arduino IDE
                бағдарламасы қай Arduino тақтасын қосқаныңызды көрсетуі керек. Ол үшін келесі
                суретте көрсетілгендей «Құралдар {'>'} Тақта {'>'} Тақтаның аты» мәзір бөліміндегі
                тізімнен қажетті тақтаны таңдаңыз: <br />
                Arduino IDE-ні орнатушы арқылы инсталляция жасағанда Windows үшін драйверлер
                автоматты түрде жүктеледі. Егер IDE-ні zip файлдан орнатса, драйверлерді орнату үшін
                келесі қадамдарды орындау керек: <br />
                <li>- драйверді сәтсіз орнату туралы хабарламаның шығуын күту; </li>
                <li>- Іске қосу – Басқару панелін ашу керек; </li>
                <li>- Жүйе және қауіпсіздік – Жүйе бөлімін ашу керек; </li>
                <li>- Осы жерден Құрылғылар диспетчерін таңдаймыз;</li>
                <li>
                  - порттарға назар аударыңыз (COM және LPT). Атауында Arduino жазбасы бар ашық
                  портты көресіз;{' '}
                </li>
                <li>
                  - контексті мәзірден Драйверді жаңарту опциясын таңдаңыз (Update Driver Software);{' '}
                </li>
                <li>- Browse my computer for Driver software қатарын таңдаңыз; </li>
                <li>
                  - орнатуды аяқтау үшін Arduino бағдарламалық жасақтамасының Drivers бумасындағы
                  драйвер файлын тауып, таңдаңыз (FTDI USB Drivers ішкі каталогындағы емес);{' '}
                </li>
                <li>- нәтижесінде Windows драйвері орнатылады.</li>
                Енді Arduino IDE-ні іске қосамыз. Алғашқы бағдарламаны Arduino платасына жүктеуге
                барлығы дайын. Оған көз жеткізу үшін кірістірілген жарықдиодты іске қосатын Blink
                бағдарламасын іске қосу керек. Arduino платаларының көпшілігінде 13 цифрлық
                контактіге қосылған жарықдиоды бар.
                <i>
                  File - Examples - Basic командаларын орындап, Blink бағдарламасын таңдаймыз. Осы
                  бағдарламаның коды бар жаңа терезе ашылады. Мысал ретінде оны Arduino платасына
                  жүктейміз, содан кейін өз бағдарламамызды жазу бойынша талдау жасаймыз.
                  Бағдарламаны Arduino платасына жүктемес бұрын, платаның типін және тізбек портының
                  нөмірін көрсету керек. Мәзірден Tools-Board (сервис-плата) опциясын тауып,
                  тізімнен Arduino платасын таңдаңыз (біздің жағдайда Arduino Uno). Содан кейін
                  плата қосылған портты көрсетеміз. Tools-Serial Port (Сервис-Тізбектелген порт)
                  опциясына өтіп, тізбектелген портты таңдаңыз. Windows ОЖ-лі компьютерлерде бұл
                  COM* болады, мұнда * - тізбектелген порт нөміріне сәйкес келетін белгілі бір сан.
                  Linux және Mac компьютерлерінде порт dev/tty.usbmodem* немесе /dev/tty.usbserial*
                  деп белгіленген, мұнда * - алфавиттік-сандық таңбалар жолы. Егер тізімде бірнеше
                  тізбектелген порттар болса және Arduino платасының оның қайсысына қосылғанын
                  анықтау қиын болған жағдайда, мәзірден қай порттың сөніп қалатынын көру үшін
                  платаны өшіріңіз, сөнген порт Arduino платасының қосылу порты.
                </i>
                Енді алғашқы бағдарламаны платаға жүктеуге болады. Ол үшін Arduino IDE-нің сол жақ
                жоғары бұрышындағы Upload (Жүктеу) батырмасын басу керек. Төменде орналасқан
                қалып-күй қатарында бағдарламаны компиляциялау және жүктеу процесі көрсетіледі.
                Бағдарламаны жүктегеннен кейін Arduino-нің 13 цифрлық контактісіне қосылған
                жарықдиоды секундына бір рет жиілікпен қызғылт сары түсте жыпылықтауы қажет.
              </p>
            </>
          )}
          {add === 30 && (
            <>
              <h2 className="readRight__title">
                Arduino IDE-да бағдарламалау негіздері. Бағдарлама құрылымы
              </h2>
              <p>
                Arduino архитектурасымен үйлесімді тақшалар базасында өз қосымшаларын әзірлеу
                Arduino IDE ресми тегін бағдарламалау ортасында жүзеге асырылады. Орта Arduino
                үйлесімді құрылғының платасында орнатылған микроконтроллердің жадына өз
                бағдарламаларын жазуға, кұрастыруға және жүктеуге арналған. Processing/Wiring тілі
                негізі әзірлеу ортасы болып табылады бұл іс жүзінде әдеттегі С++, байланыстарда
                кіріс шығыс басқару үшін жай және түсінікті функцияларымен толықтырылған. Windows,
                Mac OS және Linux операциялык жүйелеріне арналған орта нұсқалары бар. Arduino
                платформасының шықпалары кіріс немесе шығыс ретінде жұмыс істей алады. Сонымен
                қатар, Arduino (ATmega) логиндерін сандық енгізу-шығару порттары сияқты теңшеуге
                және жұмыс істеуге болады. Arduino шықпалары кіріс порты ретінде теңшелген,
                сондыктан pinMode () функциясына ешқандай хабарландыру кажет емес.
                Конфигурацияланған кіру порттары жоғары импеданс жағдайында болады. Бұл кіріс порты
                қосылған тізбекке тым аз жүктеме береді дегенді білдіреді. Кіріс портын бір күйден
                екіншісіне ауыстыру үшін сізге ағымдағы мән қажет. Егер шықпамен ештене байланысты
                болмаса, онда мәндер электромагниттік кедергілермен ұсынылған кездейсоқ мәндермен
                кабылданады. <br />
                Егер кіріс портында сигнал болмаса, белгілі күйдің портын кою ұсынылады. Бұл
                созылатын 10 кОм резисторларды қосу, кірісті + 5 В куат көзіне қосу немесе жерге
                косу арқылы жасалады. <br />
                АТтеда микроконтроллердің арналған кірістірілген тарткыш 20 ком резисторлары бар.
                Бұл резисторларды бағдарламалау келесідей жүзеге асырылады: <br />
                pinMode (pin, INPUT); // кірістің енгізу портын белгілейміз <br />
                digitalWrite (pin, HIGH); // тартқыш резисторды қосамыз
                <br />
                <br />
                Шығу порттары ретінде теңшелген қорытындылар төмен қарсылық жағдайында болады. Бұл
                қорытындылар өте үлкен ағымнан өтуі мүмкін. <br />
                Шығу порттары ретінде гонфигурацияланған шығыстар төмен карсылық жағдайында болады.
                Бұл шыкпалар өте үлкен ағымнан өтуі мүмкін. <br />
                АТтеда микросхемалары 40 мА дейін тоқ көзі болуы мүмкін. Бұл ток білімі көптеген
                реле, соленоидтар мен қозғалтқыштар үшін жеткіліксіз. <br />
                Arduino шықпаларының қыска тұйықталуы немесе энергияны кажет ететін құрылғыларды
                косу әрекеттері шығыс транзисторларын немесе ATmega микроконтроллерін зақымдауы
                мүмкін. <br />
                <h3>Аналогтық кіріс</h3>
                Arduino-да колданылатын АТтеда микроконтроллерлері алты арналы аналогтық-сандық
                түрлендіргішті (АСТ) камтиды. Түрлендіргіш ажыратымдылығы 10 бит құрайды, бұл 0-ден
                1023-ге дейінгі мәндерді алуға мүмкіндік береді. Аналогтық кіріс енгізу/шығару
                порттарының сандық шығысы ретінде пайдаланылуы мүмкін, ал олардың 14-тен 19-ға
                дейінгі нөмірлері бар: pinMode (14, ШЫҒУ);
                <br />
                digitalWrite(14, HIGH);
                <br />
                Бұрын сандық шығу порты ретінде жұмыс істеген шығу үшін analogRead командасы дұрыс
                жұмыс істемейді. Бұл жағдайда оны аналогтық кіріс ретінде баптау ұсынылады.
                <h3>Arduino жады</h3>
                Arduino платформаларында пайдаланылатын Atmega168, ATmega328, ATmega1280, ATmega2560
                микроконтроллерлерде үш жады бар:
                <li>• флеш-жалы скетчтарын сактау үшін қолданылады;</li>
                <li>
                  • ЖЕҚ (статикалык жедел жады) - өзгермелерді сактау және жұмыс істеу үшін қызмет
                  етеді;{' '}
                </li>
                <li>
                  • EEPROM (энергияға тәуелсіз жады) тұракты акпаратты сақтау үшін колданылады.
                </li>
                <li>
                  • Флеш-жады және EEPROM энергияға тәуелсіз жады түрлері (деректер қуат көзі өшкен
                  кезде сақталады) болып табылады. • ЖЕҚ энергияга тәуелді жады.{' '}
                </li>
                ATmega168 микроконтроллерінде бар:
                <li>
                  • 16 Кбайт флеш-жады (2 Кбайт жүктеуіші үшін қолданылады); • ЖЕҚ 1024 байты;
                </li>
                <li>• EEPROM 512 байт.</li>
                ATmega328 үшін бұл көрсеткіштер келесі:
                <li>• 32 Кбайт флеш-жады (2 Кбайт жүктеуіші үшін қолданылады); • ЖЕҚ 2 КБайт,</li>
                <li>• EEPROM 1024 байт.</li>
                ATmega1280 үшін бұл көрсеткіштер келесі:
                <li>• 128 Кбайт флеш-жады (2 Кбайт жүктеуіші үшін қолданылады); • ЖЕҚ 8 КБайт;</li>
                <li>• EEPROM 4096 байт.</li>
                Atmega 2560 үшін бұл көрсеткіштер келесі:
                <li>• 256 Кбайт флеш-жады (2 Кбайт жүктеуіші үшін қолданылады): • ЖЕҚ 16 КБайт,</li>
                <li>• EEPROM 9182 байт.</li>
                <li>• ЖЕҚ-да бос орын болмаған жағдайда бағдарлама істен шығуы мүмкін.</li>
                <br />
                <h3>Бағдарлама құрылымы</h3>
                Arduino Wiring тілінде бағдарламаланады, ол шын мәнінде жок, жэне Wiring компиляторы
                жоқ сияқты Wiring-те жазылған бағдарламалар С/С++ тілінде бағдарламага айналады және
                кейін AVR-GCC № компиляторы компиляцияланады. Шын мәнінде AVR микроконтроллерлері
                үшін С/C++ нұсқасы арнайы қолданылады. <br />
                <h3>
                  <i>Setup () және loop() функциялары</i>
                </h3>
                Arduino үшін бағдарламаның негізгі құрылымы кем дегенде скі бөліктен тұрады: setup()
                және loop () функциялары. Setup () функциясын айнымалыларды орнату, кітапханаларды
                қосу алдын алады. Setup() функциясы Arduino тақшасын косканнан немесе лақтырғаннан
                кейін бір рет іске косылады. Ол айнымалыларды инициализациялау, порт режимін орнату
                жане баска да негізгі бағдарламалық әрекет циклі үшін алдын ала шарттары үшін
                колданылады. Ол ешкандай әрекет жасамаса да, бағдарламаға енгізілуі тиіс. Loop ()
                функциясы шексіз цикаде оның денесінде сипатталған командаларды жүйелі түрде
                орындайды. Бұл функция циклді орындалады, ол негізгі жұмысты орындайды Карапайым
                бағдарламаның мысалы 1 листингінде ұсынылған. 1 лтстинг.
                <p>void setup()</p>
                <p>{'{'}</p>
                <p>Serial.begin(9600);</p>
                <p>{'}'}</p>
                <p>void loop()</p>
                <p>{'{'}</p>
                <p>Serial.print(millis());</p>
                <p>delay(1000) ;</p>
                <p>{'}'}</p>
                <br />
                <h3>Синтаксис және операторлар</h3>
                <i>Баскарушы операторлар</i>
                <br />
                If операторы (шарт) және салыстыру операторлары =, !=, {'<,>'}
                <br />
                <br />
                If операторы салыстыру операторларымен бірге колданылады, ол шарттын шынайылығына
                кол жеткізгенін мысалы, кіріс мәні берілген саннан асып кетпегенін тексереді. І
                операторының пішімі келесі: <br />
                if (some Variable {'>'} 50) <br />
                {'{'} <br />
                іс-қимылдарды орындау <br />
                {'}'} <br />
                Бағдарлама some Variable мәнін 50-ден артық немесе жок екенін тексереді. Егер болса,
                онда белгілі бір іс-әрекеттер орындалады. Әйтпесе, дөңгелек жақшадағы ернек шынайы
                болса, фигуралык жакшаның ішінде операторлар орындалады. Жок болса, багдарлама бұл
                кодты өтіп кетеді. <br />
                Дөңгелек жакшаның ішінде есептелетін өрнектер бір немесе бірнеше операторлардан
                тұруы мүмкін. <br />
                Салыстыру операторлары: <br />
                х == у (х у-ке тең); х != у (х у-ке тең емес); <br />
                ху (ху-тен аз); х {'>'} у (х у-тен көп); <br />x {'<'}= у (х у-тен аз немесе тең); х{' '}
                {'>'}= у (х у-тен артық немесе тен). <br />
                <br />
                <h3>if..else операторы</h3>
                <br />
                If...else кұрылымы іf базалык операторына қарағанда, кодты орындау процесі бойынша
                үлкен бақылауды ұсынады, "әлде, әлде" таңдауға мүмкіндік береді. Мысалы: <br />
                if (pinInput==HIGH) <br />
                {'{doFun1();) else (doFun2();}'} <br />
                Else <br />
                {'{doFun2();}'} <br />
                Else if-да көрсетілгеннен тексеруді өзгеше жасауға мүмкіндік береді, бірден бірнеше
                өзара бұрмалаушы тексерулерді жүзеге асыруға болады. Әрбір тексеру одан кейінгі
                операторға АҚИҚАТ логикалық натижесін алганнан бұрын емес ауысуға мүмкіндік береді.
                АҚИҚАТ натижесімен тексеру табылған кезде, оған салынған операторлар блогы іске
                косылады. содан кейін бағдарлама if..else конструкциясындағы барлык келесі жолдарды
                елемейді.
                <p>
                  Егер тексерулердің ешкайсысы АҚИҚАТ нәтижесін алмаса, эдепкі бойынша else-де
                  операторлар блогы орындалады, егер соңғысы бар болса және адепкі әрекет
                  орнатылады.
                </p>
                <p>
                  Else if құрылымы корытынды else-мен және керісінше пайдаланылуы мүмкін. Else if
                  (листинг 2) осындай өтпелердің шексіз саны руксат етіледі.
                </p>
                2 листинг. <br />
                if (pinAnalogInput {'<'} 100) <br />
                {'{doFun10):}'} <br />
                {'else if (pinAnalogInput >= 150)'} <br />
                {'{doFun20;}'} <br />
                {'{doFun3();}'} <br />
                <p>
                  Switch case oneраторы өзара бұрмалаушы тексерулермен ауысуларды жасаудын баска
                  әдісін пайдаланады.
                </p>
                <h3>For операторы</h3>
                <p>
                  For кұрылымы фигуралык жакшаларға жасалған операторлар блогын кайталау үшін
                  колданылады. Үстелу есептегіші адетте циклді жетілдіру және аяктау үшін
                  колданылады. For операторы кез келген кайталанатын әрекеттер үшін жарамды және жиі
                  деректер/корытындылар коллекцияларының массивтерімен бірге колданылады.
                </p>
                <li>
                  • for (initialization; condition; increment){' {циклде орындалатын операторлар}'}
                </li>
                <li>
                  • Инициализация (initialization) ең бірінші және бір рет орындалады. Циклде әрбір
                  рет шарт (condition) тексеріледі, егер ол дұрыс болса, операторлар блогы және
                  үстелу (increment) орындалады, содан кейін шарт кайтадан тексеріледі. Шарттың
                  логикалық мәні жалған болғанда, цикл аяқталады. 3 листингінде ЕИМ-шығаруды қолдану
                  арқылы жарық диодты караңғылау мысалы келтірілген.
                </li>
                3 листинг. <br />
                // ЕИМ-шығару колдану арқылы жарык диодты қараңғылау. <br />
                Int PWMpin=10; // Жарық диоды рет-ретімен R=470 Ом-мен void setup() 10 шыкпасында
                {'{;}'} <br />
                {'Void loop()'} <br />
                {'{'}br
                {'for (int i=0; i <= 255; i++)'} <br />
                {'{'} <br />
                {'analogWrite(PWMpin, i);'} <br />
                {'delay(10);'} <br />
                {'}'} <br />
                {'}'} <br />
                <h3>Switch onepaторы</h3>
                <p>
                  Switch...case кұрылымы бағдарламашыға түрлі жағдайларда орындалатын балама кодты
                  қоюға мүмкіндік бере отырып, бағдарламаны орындау процесін баскарады. Switch
                  операторы case операторларында анықталған мәнмен айнымалы мәнін салыстырады. Мәні
                  айнымалы мәніне тең саѕе операторы табылған кезде, осы операторда бағдарламалық
                  код орындалады. Вreak кілт сөз case операторынан шығу командасы болып табылады
                  және әдетте әрбір case соңында колданылады. Break операторысыз switch oпepaторы
                  break nemece switch oператорыных сована жеткенше келесі өрнектерді есептеуді
                  жалғастырады. Switch командасынын спитаксисі... сase 4 листингінде ұсынылған.
                </p>
                switch (var) <br />
                4 листинг. <br />
                {'{'} <br />
                case label1: <br />
                код для выполнения break; <br />
                case labl2: <br />
                код для выполнения break; <br />
                case label3: <br />
                код для выполнения break; <br />
                default: <br />
                код для выполнения break; <br />
                {'}'} <br /> <br />
                Параметрлері: <br />
                Var case нұскаларымен салыстыру үшін есептелетін айнымалы, <br />
                label - айнымалы мәнімен салыстырылатын мэн.
                <h3>While onepamоры</h3>
                <p>
                  While операторы циклде, дөнгелек жақшаның ішіндегі өрнек ЖАЛҒАН логикалыкка тең
                  болғанша дейін, үздіксіз және шексіз есептейді. Тексерілетін айнымалының мәні
                  бірденені өзгерту керек, әйтпесe while циклынан шығу ешкашан болмайды. Бұл өзгеріс
                  бағдарламалық кодта да, мысалы, айнымалы ұлғайған кезде де, сырткы жағдайларда да,
                  мысалы, датчикті тестілеу кезінде де орын алуы мүмкін. Команда синтаксисі келесі:
                </p>{' '}
                <br />
                While операторын пайдалану үлгісі 5 листингінде ұсынылған. <br />
                5 листинг. <br />
                var i=0; <br />
                while($i{'>'}100) <br />
                {'{'} <br />
                oператоры <br />
                i++; <br />
                {'}'} <br />
                <h3>Do... while onepаторы</h3>
                <p>
                  Шарт цикл сонында тексерілуден баска, до циклі while циклі сиякты жұмыс істейді.
                  Таким образом, цикл до будет всегда выполняться хотя бы раз. Пример использования
                  оператора do... while представлен в листинге 6.
                </p>{' '}
                <br />
                6 листинг. <br />
                do {'{'} <br />
                delay(50); // датчиктер тұракталғанша күту х = readSensors(); // датчиктерді тексеру
                | while (x {'>'}100); <br />
                {'}'} <br />
                <h3>Break операторы</h3>
                <p>
                  Break операторы, циклдің аяқталуын күтпестен, do, for немесе while циклдарынан
                  мәжбүрлі шығу үшін қолданылады. Ол сондай-ақ switch операторынан шығу үшін
                  қолданылады. Мысал 7 листингінде келтірілген.
                </p>
                7 листинг. <br />
                for (x = 0; x {'<'}255; x++) <br />
                {'{'} <br />
                digitalWrite(PWMpin, x); <br />
                sens = analogRead(sensorPin); <br />
                if (sens {'>'} threshold) <br />
                {'{'} // датчиктен сигнал бар болса, циклден шығамыз х = 0; <br />
                break: <br />
                {'}'} <br />
                delay(50); <br />
                {'}'} <br />
                <h3>Continue onepиторы</h3>
                <p>
                  Continue onepaторы калган операторларды ағзаги пика вдла өткізеді. Олардын орнына
                  арбір келесі итерация кезінде болять виклдін шартты өрнегін тексеру жүргізіледі.
                  Мысал в листиннінде келтірілтен,
                </p>
                8 листинг. <br />
                for (x=0x255x++) <br />
                {'{'} <br />
                if(x{'>'}40&&x{'<'}120) <br />
                {'{'} // егер акикат болса, пиклдін келесі итерациясына бірден секіреміз <br />
                continue; <br />
                {'}'} <br />
                {'}'} digitalWrite(PWMpin, x); delay(50); <br />
                <h3>Return onepaторы</h3>
                <p>
                  Return операторы функцияда есептеуді тоқтатады және кажет болса, мәнді үзілген
                  функциядан шақырушы функцияга кайтарады. Аналогтык кіріс кірісінің мәніне
                  байланысты функциядан мэнді қайтару мысалы 9 листингінде берілген.
                </p>
                9 листинг. <br />
                int checkSensor() <br />
                {'{'} <br />
                if (analogRead(0) {'>'} 200) <br />
                return 1; <br />
                else return 0; <br />
                {'}'} <br />
                <h3>Синтаксис</h3>
                : (үтірмен нүкте); (semicolon) <br />
                (үтірмен нүкте) оператордын шетін белгілеу үшін колданылады. <br />
                int a=13; <br />
                {}(фигуралы жактазар) {} (curly braces) <br />
                <p>
                  Фигуралы жакталар {} - С багдарламалау тілінің манызды элементі, Ашу жакшасы{' '}
                  {'{ аркашан жабатын жақшамен бірге болуы керек }'}. Бұл фигуралык жакталардын
                  жұптылығы (симметриялығы) ретінде белгілі шарт. Фигуралы жакталарды пайдаланудың
                  негізгі тәсілдері:
                </p>
                функциялары: <br />
                void функцияның атауы (аргументтің деректер түрі) {'{оператор(лар)}'}; <br />
                циклдер: <br />
                <p>{'while (логикалык орнек) {оператор(лар)}; '}</p>
                <p>{' do {оператор(лар)} while (логикалык өрнек); '}</p>
                <p>for (инициализация; циклдің аяқталу шарты; циклдің өсуі) </p>
                <p>{'{оператор(лар)};'}</p>
                шартты операторлар: <br />
                if (логическое выражение) (оператор(ы)). <br />
                Түсініктеме // (single line comment), /* */ (multi-line comment) <br />
                <p>
                  Түсініктеме - бұл бағдарлама калай жұмыс істейтіні туралы сізді немесе баскаларды
                  хабардар ету үшін пайдаланылатын бағдарламадағы жолдар. Олар компилятормен
                  елемейді және микроконтроллердің жадында орын алмайды. Түсініктеме ретінде жолды
                  белгілеудің екі жолы бар:
                </p>
                <li>• бір жолдык түсініктеме - //;</li>
                <li>• коп жолдык түсініктеме */. Мысал 10 листингінде келтірілген.</li>
                10 листинг. <br />
                <p>
                  * = 5; // Бұл бір жолда түсініктеме. Барлығы екі // слэштан кейін жолдын сонына
                  дейін түсініктеме.
                </p>
                <p>
                  /* бұл көп жолды пікір кодтың бүтін бөліктерін қиып алу үшін оны пайдаланыныз */
                </p>
                <h3>Арифметикалык операторлар</h3>
                =(assigment) = меншіктеу операторы <br />
                Оңға жағында орналасқан (11 листинг) сол жақтағы айнымалысына оператордан айнымалы
                мәні немесе өрнегін береді. <br />
                11 листинг. <br />
                int sens Val: // integer айтымалы түрін хабарландыру <br />
                sen Val=аnalogRead(), // senVal aйнымалысының мизмін меншіктеу, //аналогтық кіріспен
                саналган 0 <br />
                Меншіктеу операторының сол жағындағы айнымалы (=) берілген мәнді сақтауга қабілетті
                болуы тиіс. <br />
                Егер ол руксат етілген мәндер диапазонынан шыккан болса, онда сақталған мен дұрыс
                болмайды. Теңдікті тексеруді жузеге асыратын меншіктеу операторын (=) және салыстыру
                операторын (== екі есе теңдік белгісі) ажырату кажет. <br />
                <h3>Салыстыру операторлары</h3>
                Салыстыру операторлары: <br />
                {
                  'x==y (x у-ке тең), х != у (х у-ен тең емес); x <у (х у-тен кем), х>y (x у-тен жогары); x <= у (х у-тен аз немесе тең); х> = у (х у-ден артық немесе тең).'
                }{' '}
                <br />
                <h3>Логикалык, операторлар</h3>
                Логикалык операторлар көбінесе if операторының шарттарын тексеруде колданылады.{' '}
                <br />
                && (логикалық ЖӘНЕ) <br />
                Ақиқат, егер екі операнда акикат (true). Мысал: <br />
                if (digitalRead(2) = HIGH && digitalRead(3) == HIGH) <br />
                Serial.println("ok"); <br />
                || (логикалық НEMECE) <br />
                Ақиқат, егер кем дегенде бір операнд акикат болса. Мысал: <br />
                if (digitalRead(2) || digitalRead(3) = HIGH) <br />
                Serial.println(“ok”); <br />
                ! (логикалық терістеу) <br />
                Ақиқат, егер операнд false және керісінше болса. Мысал: <br />
                If (!digitalRead(2)==HIGH) <br />
                Serial.println(“ok”); <br />
              </p>
            </>
          )}
          {add === 31 && (
            <>
              <h2 className="readRight__title">
                Arduino-да бағдарламалау. <br />
                14.1 Бірінші бағдарлама
              </h2>
              <p>
                Arduino бағдарламасын орнатып, USB қосылымдарын жасағаннан кейін кодты жазбай-ақ,
                бірінші қосымшамызды, жыпылықтау мысалын жасайық. Ең алдымен, Arduino
                бағдарламасынан; File/Examples/ Basics/Blink таңдап, бағдарламаны құрастырып, оны
                Arduino-ға импорттайық. Жарық диодты қосылым келесідей болады. <br />
                <p>{'<p>{{void setup() {'} //негізгі қондырғылар</p>
                <p>{'pinMode(13, OUTPUT); '} //13. сандық шығыс пин</p>
                <p> {'}'}</p>
                <p> {'void loop() {	'} // шексіз цикл</p>
                <p> {'digitalWrite(13, HIGH); '} // жарық диоды 5в деңгейінде</p>
                <p> {'delay(1000);'} // 1 секунд күту</p>
                <p> {'digitalWrite(13, LOW);'} // жарық диоды 0в деңгейінде</p>
                <p> {'delay(1000);'} // 1 секунд күту</p>
                <p> {' }'}</p>
                <p> {'Код – 1. Blink'}</p>
                <br />
                <p style={{ textAlign: 'center' }}>
                  <img src="/img/img60.png" />
                  <li>14.1-сурет. - Жарық диодты жыпылықтау схемасы </li>
                </p>
                <br />
              </p>
            </>
          )}
          {add === 32 && (
            <>
              <h2 className="readRight__title">14.2 Blink бағдарламасына талдау жасау. </h2>
              <p>
                Arduino үшін жазылған бағдарламалардың негізгі құрылымын түсіну үшін Blink
                бағдарламасының мәтінін қарастырайық:
                <br />
                <p style={{ textAlign: 'center' }}>
                  <img src="/img/img61.png" />
                  <li>14.2-сурет. Blink бағдарламасы</li>
                </p>
                <br />
                <b>1 - көпқатарлы түсініктеме.</b> Түсініктемелер бағдарламаның кодын түсіндіру үшін
                маңызды. Осы символдардың ішінде жазылған барлық жазбалар компилятормен өңделмейді.
                Көп қатарлы түсініктемелер /* - басталады және */ - аяқталады. Түсіндірменің мәтіні
                көп болған кезде көп қатарлы пікірлерді қолданған ыңғайлы, мысалы, бағдарламаның
                сипаттамасы.
                <b>2 - бірқатарлы түсініктеме.</b> Егер // белгісі кез-келген жолға қойылса,
                компилятор жолдың осы таңбадан кейінгі барлық мәтінін елемейді. Бірқатарлы
                түсініктеме кодтың белгілі бір жолын түсіндіреді.
                <b>3 – айнымалыны хабарландыру коды.</b> Айнымалы - бұл ақпаратты қамтитын жад
                ұяшығы. Әр түрлі типті айнымалылар бар. Суреттегі мысалда бүтін санды білдіретін int
                типті айнымалы көрсетілген. Бүтін санды led айнымалысына 13 мәні меншіктелген – ол
                Arduino платасындағы жарық диоды қосылған цифрлық контакт нөмірі. Бағдарламаның
                қалған бөлігінде 13 контактісін басқару кезінде, led айнымалысын қолдануға болады.
                Бұл жағдайда айнымалылар ыңғайлы, өйткені кіріс-шығыс контактісін өзгерту қажет
                болса, тек бір жолды өзгерту жеткілікті, ал қалған код өзгермейді.
                <b> 4 - setup () функциясы,</b> Arduino-ның әр бағдарламасына енгізілуі керек екі
                функцияның бірі. Функция - бұл белгілі бір тапсырманы орындайтын код бөлігі. Setup
                () функциясының денесіндегі код бағдарламаның басында бір рет орындалады. Бұл
                баптаудың бастапқы параметрлерін орнату, енгізушығару порттарының режимдерін
                тағайындау, байланыс интерфейстерін инициализациялау және т.с.с. үшін пайдалы
                <b>5 - Arduino цифрлық контактілерін</b> кіріс немесе шығыс үшін бағдарламалауға
                болады. Олардың бағыттарын конфигурациялауға - дөңгелек жақшаларда көрсетілген екі
                параметрі бар pinMode () командасы мүмкіндік береді. pinMode-нің бірінші параметрі
                байланыс нөмірін анықтайды. led айнымалысы осыған дейін бағдарламада меншіктеліп
                қойылғандықтан, конфигурация 13 контактісі үшін орнатылады. Екінші параметр контакт
                бағытын орнатады: INPUT (кіріс) немесе OUTPUT (шығыс). Үнсіз келісім бойынша барлық
                контактілер кіріске бапталған. Оларды шығысқа конфигурациялау үшін, осы параметрдің
                мәнін OUTPUT деп көрсету керек. Жарықдиодты басқару керек болғандықтан, 13
                контактісі шығыс болуы керек. Контактінің конфигурациясын баптау, оның арналуын
                кіріске өзгерткенше сақталады.
                <b>6 – Arduino бағдарламаларындағы</b> екінші міндетті функция - loop (). Бұл цикл
                операторы. <b>7 - digitaiwrite () функциясы</b> шығыс контактісінің параметрін
                орнатады: 5 немесе 0 В. Егер жарықдиоды контактіге резистор арқылы қосылған болса,
                онда логикалық "1" мәнін орнату жарықдиодын қосуға мүмкіндік береді (ол туралы толық
                келесі дәрістерде қарастыралады). Digitaiwrite () функциясының бірінші
                параметрі-басқару қажет болатын контакт нөмірі. Екінші параметр: HIGH (5 В) немесе
                LOW (0 В) берілетін мән. Контакт келесі digitaiwrite () командасымен өзгертілгенге
                дейін осы мәнді сақтайды.
                <b>8 - delay () функциясы</b> бір аргумент — бағдарламаның орындалуының кідіріс
                уақытына ие (миллисекундта). Delay () орындалған кезде, Arduino бағдарламаның
                орындалуын белгілі бір уақыт аралығына тоқтатады. Біздің мысалда, кідіріс 1000 мс-қа
                (1с) тең. Бұл келесі команданы орындағанға дейін жарықдиодының бір секунд ішінде
                қосылып тұруына әкеледі
                <b>9 - мұнда digitaiwrite ()</b> функциясы контакт мәнін LOW-ға орнатып, жарықдиодын
                сөндіруге шақырылған.
                <b>10</b> - циклды қайталау алдында жарықдиоды сөнуі үшін тағы бір секунд кідіріс
                жасау.
              </p>
            </>
          )}
          {add === 33 && (
            <>
              <h2 className="readRight__title">14.3 Tinkercad Circuits Arduino-мен танысу</h2>
              <p>
                Tinkercad Circuits Arduino - Бұл Arduino-ның тегін эмуляторы, ол электр тізбектерін
                жинауға және Arduino-ны бағдарламалауға және процесті имитациялау арқылы оның
                функционалдығын тексеруге мүмкіндік береді. Бұл жаңадан бастағандар үшін Arduino
                және робототехниканы үйренуге өте ыңғайлы. Бастау үшін Tinkercad сайтында тіркелу
                жеткілікті.
                <i>Arduino әзірлеушісіне арналған Tinkercad симуляторының мүмкіндіктері:</i>
                <li>
                  {' '}
                  Онлайн платформа, жұмыс істеу үшін браузер мен тұрақты интернеттен басқа ештеңе
                  қажет емес.
                </li>
                <li>
                   Электрондық схемаларды көрнекі түрде құруға арналған ыңғайлы графикалық
                  редактор.
                </li>
                <li>
                   Құрамдас түрі бойынша сұрыпталған ең танымал электрондық компоненттердің алдын
                  ала орнатылған үлгілерінің жиынтығы.
                </li>
                <li>
                   Жасалған виртуалды құрылғыны виртуалды қуат көзіне қосуға және оның қалай жұмыс
                  істейтінін көруге болатын электрондық схема симуляторы.
                </li>
                <li>
                   Датчиктердің симуляторлары және сыртқы әсер ету құралдары. Жүйенің оларға қалай
                  әрекет ететінін бақылай отырып, сенсор көрсеткіштерін өзгертуге болады.
                </li>
                <li> Порт мониторы және қадамдық жөндеуі бар кірістірілген Arduino редакторы.</li>
                <li> Схемалары мен коды бар Arduino жобаларын орналастыруға дайын.</li>
                <li> Visual Arduino код редакторы.</li>
                <li>
                   Tinkercad функцияларының қалған бөлігімен біріктіру және құрылғыңыз үшін корпус
                  пен басқа құрылымдық элементтерді жылдам жасау мүмкіндігі - көрсетілген үлгіні
                  бірден 3D принтеріне жіберуге болады.
                </li>
                <p>
                  Tinkercad Circuits Arduino-да тіркелу үшін іздеу жүйесінде «Tinkercad» сөздерін
                  іздеу керек. tinkercad.com домен атауы бар веб-сайтқа өтіңіз. Тіркелу үшін
                  «Қосылу» түймесін басу керек. Электрондық пошта арқылы тіркелуге немесе Apple
                  немесе Google есептік жазбасын пайдаланып кіруге болады. TinkerCad бастапқыда өзін
                  3D модельдеу қызметі ретінде орналастырғандықтан, жеке тіркелгіңізге кірген кезде
                  сіз 3D модельдеу бөліміне өтесіз. Электр тізбектерін құру бөліміне өту үшін
                  «Ciruits» түймесін басыңыз.
                </p>
                <br />
                <p style={{ textAlign: 'center' }}>
                  <img src="/img/img62.png" />
                  <li>14.3-сурет. Жаңа жоба ашу </li>
                </p>
                <br />
                <p>
                  Өзіңіздің схемаңызды жасау үшін «Схеманы жасау» түймесін басу керек, сонда жұмыс
                  өрісі ашылады. Жоғарғы жағында шағын мәзір бар. Ал оң жақ бағанда электр тізбегін
                  құрастыру кезінде пайдалануға болатын «Компоненттер тақтасы» бар. Тізбекті
                  құрастыруды бастау үшін қажетті элементті жұмыс өрісіне тартып, оны өткізгіштермен
                  жалғау жеткілікті.
                </p>
                <br />
                <p style={{ textAlign: 'center' }}>
                  <img src="/img/img63.png" />
                  <li>14.4-сурет. Tinkercad жүйесінде Arduino бағдарламалау. </li>
                </p>
                <br />
                Arduino-ны жұмыс үстеліне қосқаннан кейін сіз кодпен жұмыс істей аласыз. Scratch
                блоктарын немесе кодты пайдаланып Arduino-ны бағдарламалауға болады. «Симуляцияны
                бастау» түймесін басқан кезде, Arduino тақтасындағы жарық диоды жыпылықтағанын
                көреміз. Жарық диодты шам Arduino-ны жұмыс кеңістігіне қосқанда автоматты түрде
                жасалатын сынақ бағдарламасы арқылы жыпылықтайды.
                <br />{' '}
                <p style={{ textAlign: 'center' }}>
                  <img src="/img/img64.png" />
                  <li>14.5-сурет. Жарықдиодты қосу</li>
                </p>
                <br />
                Сыртқы жарықдиодты қосайық. Ол үшін нан тақтасына жарық диодты және резисторды
                орнатыңыз. Барлығын сызба бойынша байланыстырайық. Кірістірілген жарық диоды 13-ші
                Arduino істікшесіне қосылған. Бір аяққа сыртқы жарық диодты қосып, кірістірілген
                және сыртқы жарық диодының синхронды жыпылықтауын көруге болады (14.5-сурет).
                <br />
                <p style={{ textAlign: 'center' }}>
                  <img src="/img/img65.png" />
                  <li>14.6-сурет. Жарықдиодты қосу коды</li>
                </p>
              </p>
            </>
          )}
          {add === 34 && (
            <>
              <h2 className="readRight__title">
                Негізгі Arduino қолданбалары
                <br />
                <br />
                15.1 Бағдаршам программасы
              </h2>
              <p>
                Бірінші қолданба ретінде қарапайым жобадан бастайық. Бұл жобада біз 3 жарықдиодты
                (қызыл, сары, жасыл) қолданамыз. Жарық диодының ұзын аяғы Arduino-ға, ал қысқа аяғы
                жерге қосылуы керек. 3 светодиодты сәйкесінше Arduino 11, 12 және 13 түйреуіштеріне
                қосамыз. Әрбір жарық диоды мен Arduino қосылымы арасында шамамен 220 Ом
                резисторларды орнатайық. Мақсаты: қызыл шам 5 секунд бойы жанып тұрады. Содан кейін
                сары шам жарты секундқа жанады, содан кейін жасыл шам 3 секундқа жанады. Бірақ содан
                кейін сары шам бір секундқа жанып, қызыл шам жанады.
                <br />
                <p style={{ textAlign: 'center' }}>
                  <img src="/img/img66.png" />
                  <li>15.1-сурет. Бағдаршам жобасын қосу</li>
                </p>
                <br />
                Мақсаты: қызыл шам 5 секунд бойы жанып тұрады. Содан кейін сары шам жарты секундқа
                жанады, содан кейін жасыл шам 3 секундқа жанады. Бірақ содан кейін сары шам бір
                секундқа жанып, қызыл шам жанады.
                <p>int kyzyl = 13; </p>
                <p>int sari = 12; </p>
                <p>int jasyl = 11; </p>
                <p>void setup() </p>
                <p>{'{'}</p>
                <p> pinMode(kyzyl, OUTPUT); </p>
                <p>pinMode(sari, OUTPUT); </p>
                <p>pinMode(jasyl, OUTPUT);</p>
                <p> {'}'}</p>
                <p> void lampaAyistir(int lamba) // kyzyl = 1, sari = 2, jasyl = 3 </p>
                <p>{'{'}</p>
                <p> digitalWrite(kyzyl, LOW); </p>
                <p>digitalWrite(sari, LOW); </p>
                <p>digitalWrite(jasyl, LOW);</p>
                <p>switch(lampa)</p>
                <p>{'{'}</p>
                <p>case 1: </p>
                <p>digitalWrite(kyzyl, HIGH); </p>
                <p>break; </p>
                <p>case 2:</p>
                <p> digitalWrite(sari, HIGH); </p>
                <p>break;</p>
                <p> case 3:</p>
                <p>digitalWrite(jasyl, HIGH); </p>
                <p>break; </p>
                <p>{'} '}</p>
                <p>{'}'}</p>
                <p> void loop() </p>
                <p>{'{'}</p>
                <p> lampaAyistir(1);</p>
                <p> delay(5000); </p>
                <p>lampaAyistir (2); </p>
                <p>delay(500); </p>
                <p>lampaAyistir (3); </p>
                <p>delay(3000); </p>
                <p>lampaAyistir (2); </p>
                <p>delay(1000); </p>
                <p>{'}'}</p>
              </p>
            </>
          )}
          {add === 35 && (
            <>
              <h2 className="readRight__title">15.2 Түймемен жарық диодты қосу</h2>
              <p>
                Қажетті материалдар: <br />
                - Arduino Uno <br />
                - Нан тақтасы <br />
                - Қызыл жарық диоды <br />
                - Батырмаға басу <br />
                -330 Ом резистор (қызғылт-сары-қоңыр) <br />
                - 10к Ом резистор (қоңыр - қара - қызғылт сары) <br />
                -5 еркек-еркек қосқыш кабель
                <br />
                <p>
                  Бұл қолданбада біз Arduino-дағы түйреуіштерді кіріс ретінде пайдалануды үйренеміз.
                  Осылайша, сырттан түйме басылған кезде Arduino ішінде бізге хабарлауды қамтамасыз
                  етеміз. Біздің LED тізбегі алдыңғы қолданба сияқты болуы мүмкін. Бұл қолданбада
                  жарық диоды қосылған аяқ қана 10 нөмірі болады. Енді схемамызды орнатып, код
                  бөлігіне көшейік.{' '}
                </p>
                <br />
                <p style={{ textAlign: 'center' }}>
                  <img src="/img/img67.png" />
                  <li>15.2-сурет. Жарықдиодын қосу</li>
                </p>
                <br />
                <p>
                  Түймеден деректерді оқу үшін біз оны 10 к Ом резистормен пайдалануымыз керек.
                  Түйме басылмай тұрғанда түйреуіште пайда болуы мүмкін кедергілерді және осы
                  кедергілерден туындайтын жалған сигналды анықтауды болдырмау үшін «pull-up» немесе
                  pull-down» резисторды пайдалану керек. Бұл қолданбада біз «pull-down» резисторын
                  қолданамыз. Бұл жобада түйме басылмаса, түйреуіштен оқылатын мән OV, яғни
                  логикалық LOW деңгейі болып табылады. «Pull-down» резистор түйме басылмайынша және
                  мән HIGH мәнге тартылмайынша, осы түйреуіштегі кернеудің OV кезінде тұрақты болып
                  қалуын қамтамасыз етеді. Схема бөлігіндегі логиканы үйренгеннен кейін код бөлігіне
                  көшейік.
                </p>
                #define Buton 8 <br />
                #define Led 10
                <br />
                int buton_durumu = 0;
                <br />
                void setup() {'{'} pinMode (Buton, INPUT); pinMode (Led, OUTPUT);
                <br />
                void loop(){'{'}
                <br />
                buton_duruma = digitalRead(Buton);
                <br />
                if (buton durumu==1) {'{'}
                <br />
                digitalWrite(Led, HIGH);
                <br />
                {'}'}
                <br />
                else {'{'}
                <br />
                digitalWrite(led, LOW);
                <br />
                {'}'}
                <br />
                {'}'}
                <br />
              </p>
            </>
          )}
          {add === 36 && (
            <>
              <h2 className="readRight__title">15.3 Arduino көмегімен жаңбыр сенсорын пайдалану</h2>
              <p>
                Қажетті материалдар: <br />
                - Arduino Uno
                <br />
                - Нан тақтасы
                <br />
                - Жаңбыр сенсоры
                <br />
                - 3 еркек-еркек қосқыш кабель
                <br />
                - 3 еркек-әйел қосқыш кабель
                <br />
                Дабыл
                <br />
                - 1 дана 330 Ом резистор (қызғылт сары - қызғылт сары - қоңыр) <br />
                <p>
                  Егер ауа-райы жаңбырлы болса, жаңбыр сенсорындағы су мөлшері белгілі бір шекті
                  мәннен асқанда, ол бізге сигнал жібереді және тізбектегі дыбыстық сигнал естіле
                  бастайды. Біз бұл схеманы аналогтық түйреуіштен алатын сигналға сәйкес дабыл беру
                  үшін дайындадық. Жаңбыр сенсоры екі электродтан тұрады. Ол бізге осы электродтар
                  арасындағы өткізгіштікті өлшеу арқылы ақпарат береді. Датчиктегі су тамшылары
                  электродтар арасындағы өткізгіштікті арттырады. Сенсор бұл деректерді аналогтық
                  және сандық шығыс ретінде береді. Біздің кодта біз жаңбыр сенсорынан деректерді
                  оқимыз және жаңбыр жауған кезде дыбыстық сигналмен дабыл береміз.
                </p>
                <br />
                <p style={{ textAlign: 'center' }}>
                  <img src="/img/img68.png" />
                  <li>15.2-сурет. Жарықдиодын қосу</li>
                </p>
                <br />
                <p>int sensorPin = A0;</p>
                <p>int esikDegeri = 100;</p>
                <p>int buzzerPin = 8;</p>
                <p>int veri;</p>
                <p>void setup() {'{'}</p>
                <p>pinMode (buzzer Pin, OUTPUT);</p>
                <p>void loop() {'{'}</p>
                <p>veri = analogRead(sensorPin);</p>
                <p>
                  if (veri {'>'} esikDegeri) {'{'}
                </p>
                <p>tone (buzzerPin, 440);</p>
                <p>delay(100);</p>
                <p>noTone (buzzerPin);</p>
                <p>delay(100);</p>
                <p>{'}'}</p>
                <p>elsel</p>
                <p>{'{ noTone (buzzerPin);'}</p>
                <p>{'}'}</p>
                <p>{'}'}</p>
                <p>
                  Біріншіден, біз қажетті айнымалыларды анықтаймыз. «setup» бөлімінде біз дыбыстық
                  сигналды шығыс ретінде қосатын пинді анықтаймыз. «loop» бөлігінде сенсордан
                  алынған мән «analogRead()» функциясымен деректер айнымалысына теңестіріледі. Содан
                  кейін деректер айнымалысының күйі «if-else» құрылымымен тексеріледі. Жаңбыр
                  сенсорынан оқылған деректер шекті мәннен жоғары болса, бұл ауа райының жаңбырлы
                  екенін көрсетеді. Егер сенсорда су болса, «if» пәрмендері орындалады және дабыл
                  беріледі. Жаңбыр сенсорынан оқылған деректер шекті мәннен төмен болса, бұл ауаның
                  құрғақ екенін көрсетеді. Ауа-райы құрғақ болса, else ішіндегі пәрмендер орындалады
                  және дабыл қағылмайды.
                </p>
              </p>
            </>
          )}
        </div>
      </div>
    </div>
  );
}

export default Read;
